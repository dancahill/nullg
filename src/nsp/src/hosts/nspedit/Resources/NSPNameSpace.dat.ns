{
	["false"] = {
		desc = "false (special variable)",
		type = "boolean"
	},
	["null"] = {
		desc = "null (special variable)",
		type = "null"
	},
	["this"] = {
		desc = "this (special variable)",
		type = "table"
	},
	["true"] = {
		desc = "true (special variable)",
		type = "boolean"
	},
	["_ENV"] = {
		desc = "table of environment variables",
		type = "table"
	},
	["_GLOBALS"] = {
		desc = "link to the global variables table (recursive)",
		type = "table"
	},
	["_filename"] = {
		desc = "name of running script",
		type = "string"
	},
	["_filepath"] = {
		desc = "path of running script",
		type = "string"
	},
	["_ostype_"] = {
		desc = "string describing the operating system",
		type = "string"
	},
	["_version_"] = {
		desc = "NSP version",
		type = "string"
	},
	["base64"] = {
		desc = "functions for working with base64 data",
		type = "table"
	},
	["base64.decode"] = {
		desc = "returns decoded string of provided base64 data",
		params = "",
		returns = "",
		type = "function"
	},
	["base64.encode"] = {
		desc = "returns base64 encoded version of provided string",
		params = "",
		returns = "",
		type = "function"
	},
	["copy"] = {
		desc = "creates and returns a clone of var (including tables)",
		params = "(object var)",
		returns = "clone of var",
		type = "function"
	},
	["debug"] = {
		desc = "misc debugging functions",
		type = "table"
	},
	["debug.break"] = {
		desc = "break execution for debugging",
		params = "none",
		returns = "void",
		type = "function"
	},
	["dirlist"] = {
		desc = "returns a table of a specified directory\'s contents",
		params = "",
		returns = "",
		type = "function"
	},
	["dl"] = {
		desc = "set of functions for loading dynamic libraries",
		type = "table"
	},
	["dl.load"] = {
		desc = "load specified library",
		params = "",
		returns = "",
		type = "function"
	},
	["dl.path"] = {
		desc = "array of paths to search for libraries loaded by dl.load()",
		type = "table"
	},
	["eval"] = {
		desc = "Evaluates a supplied expression.",
		params = "",
		returns = "",
		type = "function"
	},
	["exec"] = {
		desc = "Evaluates a supplied expression.",
		params = "",
		returns = "",
		type = "function"
	},
	["file"] = {
		desc = "collection of functions available for working with files",
		type = "table"
	},
	["file.append"] = {
		desc = "append string data to the specified file",
		params = "",
		returns = "",
		type = "function"
	},
	["file.chdir"] = {
		desc = "change to specified directory",
		params = "",
		returns = "",
		type = "function"
	},
	["file.exists"] = {
		desc = "used to check if a file or directory exists on disk",
		params = "(string filename)",
		returns = "true if filename exists, otherwise false",
		type = "function"
	},
	["file.mkdir"] = {
		desc = "create a directory",
		params = "",
		returns = "",
		type = "function"
	},
	["file.readall"] = {
		desc = "read the entire content of a file and return it as a string (binary-safe)",
		params = "",
		returns = "",
		type = "function"
	},
	["file.rename"] = {
		desc = "rename a file on disk",
		params = "",
		returns = "",
		type = "function"
	},
	["file.stat"] = {
		desc = "return a table describing the file",
		params = "",
		returns = "",
		type = "function"
	},
	["file.unlink"] = {
		desc = "delete or \'unlink\' a file/directory",
		params = "",
		returns = "",
		type = "function"
	},
	["file.writeall"] = {
		desc = "write complete string to file, replacing any existing content of the file",
		params = "",
		returns = "",
		type = "function"
	},
	["include"] = {
		desc = "load a script",
		params = "",
		returns = "",
		type = "function"
	},
	["io"] = {
		desc = "input/output functions",
		type = "table"
	},
	["io.print"] = {
		desc = "print data to console - accepts one or more comma-separated parameters",
		params = "",
		returns = "",
		type = "function"
	},
	["io.write"] = {
		desc = "write data to console",
		params = "",
		returns = "",
		type = "function"
	},
	["io.flush"] = {
		desc = "flush any buffered data to console",
		params = "",
		returns = "",
		type = "function"
	},
	["math"] = {
		desc = "math functions",
		type = "table"
	},
	["math.abs"] = {
		desc = "get absolute (positive) value of a number",
		params = "",
		returns = "",
		type = "function"
	},
	["math.ceil"] = {
		desc = "round a number up to the nearest integer",
		params = "",
		returns = "",
		type = "function"
	},
	["math.floor"] = {
		desc = "round a number down to the nearest integer",
		params = "",
		returns = "",
		type = "function"
	},
	["math.rand"] = {
		desc = "return a random number in the requested range",
		params = "",
		returns = "",
		type = "function"
	},
	["math.acos"] = {
		desc = "return the arc cosine of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.asin"] = {
		desc = "return the arc sine of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.atan"] = {
		desc = "return the arc tangent of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.atan2"] = {
		desc = "calculates the principal value of the arc tangent of y/x, using the signs of the two arguments to determine the quadrant of the result.",
		params = "",
		returns = "",
		type = "function"
	},
	["math.cos"] = {
		desc = "returns the cosine of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.sin"] = {
		desc = "returns the sine of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.tan"] = {
		desc = "returns the tangent of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.exp"] = {
		desc = "returns the exponential value of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.log"] = {
		desc = "returns the logarithm of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.log10"] = {
		desc = "returns the base 10 logarithm of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.cosh"] = {
		desc = "returns the hyperbolic cosine of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.sinh"] = {
		desc = "returns the hyperbolic sine of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.tanh"] = {
		desc = "returns the hyperbolic tangent of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["math.sqrt"] = {
		desc = "returns the square root of a value",
		params = "",
		returns = "",
		type = "function"
	},
	["net"] = {
		desc = "collection of functions and classes available for working with network connections",
		type = "table"
	},
	["net.have_tls"] = {
		desc = "value is true if TLS (Transport Layer Security, aka. SSL) is available",
		type = "boolean"
	},
	["net.tls_type"] = {
		desc = "name of TLS library in use (if available)",
		type = "string"
	},
	["net.dns"] = {
		desc = "functions for accessing DNS (Domain Name System) data",
		type = "table"
	},
	["net.dns.name2addr"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.dns.addr2name"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.ftp"] = {
		desc = "FTP classes and functions",
		type = "table"
	},
	["net.ftp.client"] = {
		desc = "class of functions for accessing FTP servers",
		params = "",
		returns = "",
		type = "function"
	},
	["net.ftp.client.client"] = {
		desc = "constructor for net.ftp.client class",
		params = "",
		returns = "",
		type = "function"
	},
	["net.ftp.client.close"] = {
		desc = "method to close an open connection to an FTP server",
		params = "",
		returns = "",
		type = "function"
	},
	["net.ftp.client.ls"] = {
		desc = "method to list files in a remote directory",
		params = "",
		returns = "",
		type = "function"
	},
	["net.ftp.client.open"] = {
		desc = "method to open a connection to an FTP server",
		params = "",
		returns = "",
		type = "function"
	},
	["net.ftp.client.retr"] = {
		desc = "method to download a file from a server",
		params = "",
		returns = "",
		type = "function"
	},
	["net.ftp.client.stor"] = {
		desc = "method to upload a file to a server",
		params = "",
		returns = "",
		type = "function"
	},
	["net.http"] = {
		desc = "",
		type = "table"
	},
	["net.http.client"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.mime"] = {
		desc = "",
		type = "table"
	},
	["net.mime.read"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.mime.write"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.mime.decode_qp"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.mime.decode_rfc2047"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.smtp"] = {
		desc = "",
		type = "table"
	},
	["net.smtp.client"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.pop3"] = {
		desc = "",
		type = "table"
	},
	["net.pop3.client"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket"] = {
		desc = "class of functions available for working with raw TCP/IP connections",
		type = "table"
	},
	["net.socket.accept"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.bind"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.close"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.connect"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.gets"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.gettype"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.info"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.read"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.setsockopt"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.socket"] = {
		desc = "constructor for objects of class net.socket",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.tlsaccept"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.tlsconnect"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.socket.write"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["net.tnef"] = {
		desc = "functions available for working with 'Transport Neutral Encapsulation Format' MIME attachments",
		type = "table"
	},
	["net.tnef.debug"] = {
		desc = "test function for TNEF decoding",
		params = "",
		returns = "",
		type = "function"
	},
	["pipe"] = {
		desc = "functions for creating and working with pipes",
		type = "table"
	},
	["pipe.open"] = {
		desc = "create a process with read/write io pipes",
		params = "(string exe[, string arg1, string arg2])",
		returns = "pipe-conn object",
		type = "function"
	},
	["pipe.read"] = {
		desc = "reads data from an open pipe",
		params = "(pipe-conn pipe)",
		returns = "input data string",
		type = "function"
	},
	["pipe.write"] = {
		desc = "writes data to an open pipe",
		params = "(pipe-conn pipe, string data)",
		returns = "number of bytes sent",
		type = "function"
	},
	["pipe.close"] = {
		desc = "closes pipe-conn",
		params = "(pipe-conn pipe)",
		returns = "void",
		type = "function"
	},
	["print"] = {
		desc = "print one or more objects to console",
		params = "([object])",
		returns = "total length of output",
		type = "function"
	},
	["printf"] = {
		desc = "print to console with formatting similar to the c function of the same name",
		params = "(string format[, ...])",
		returns = "total length of output string",
		type = "function"
	},
	["regex"] = {
		desc = "functions available for using regular expressions to work with strings",
		type = "table"
	},
	["regex.match"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["regex.replace"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["rot13"] = {
		desc = "rotate characters in a string by 13 places",
		params = "",
		returns = "",
		type = "function"
	},
	["runtime"] = {
		desc = "get the number of seconds the script has been running",
		params = "",
		returns = "",
		type = "function"
	},
	["serialize"] = {
		desc = "returns the contents of a table in string format (with subtable)",
		params = "(object arg1)",
		returns = "string representation of arg1",
		type = "function"
	},
	["sizeof"] = {
		desc = "returns size of object",
		params = "(object arg1)",
		returns = "size of object based on type. for strings, it's the length of a string. for tables, it's the number of items in the table.",
		type = "function"
	},
	["sleep"] = {
		desc = "causes script to sleep for a number of seconds (with millisecond precision)",
		params = "(number seconds)",
		returns = "void",
		type = "function"
	},
	["sort"] = {
		desc = "sort functions for tables",
		type = "table"
	},
	["sort.byname"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["sort.bykey"] = {
		desc = "",
		params = "",
		returns = "",
		type = "function"
	},
	["sprintf"] = {
		desc = "print to buffer with formatting similar to the c function of the same name",
		params = "(string format[, ...])",
		returns = "string with formatting applied",
		type = "function"
	},
	["string"] = {
		desc = "class of functions available for working with strings",
		type = "table"
	},
	["string.atoi"] = {
		desc = "get numeric value of character in a string",
		params = "(string arg1[, number offset])",
		returns = "numeric value of character in arg1 at offset",
		type = "function"
	},
	["string.itoa"] = {
		desc = "convert number to its ascii character equivalent",
		params = "(number arg1)",
		returns = "string ascii value of arg1",
		type = "function"
	},
	["string.cat"] = {
		desc = "append one string to another",
		params = "(string arg1, string arg2)",
		returns = "string with arg1 and arg2 combined",
		type = "function"
	},
	["string.cmp"] = {
		desc = "case sensitive string comparison",
		params = "(string str1, string str2)",
		returns = "number - 0 if matches, or index of first non-matching character",
		type = "function"
	},
	["string.contains"] = {
		desc = "case sensitive substring search",
		params = "(string str1, string str2)",
		returns = "true if str1 contains an instance of str2",
		type = "function"
	},
	["string.endswith"] = {
		desc = "case sensitive substring search",
		params = "(string str1, string str2)",
		returns = "true if the end of str1 matches str2",
		type = "function"
	},
	["string.icmp"] = {
		desc = "case insensitive string",
		params = "(string str1, string str2)",
		returns = "number",
		type = "function"
	},
	["string.ncmp"] = {
		desc = "case sensitive substring comparison up to len characters",
		params = "(string str1, string str2, number len)",
		returns = "number",
		type = "function"
	},
	["string.nicmp"] = {
		desc = "case insensitive substring comparison up to len characters",
		params = "(string str1, string str2, number len)",
		returns = "number",
		type = "function"
	},
	["string.join"] = {
		desc = "merge the table str into a single string separated by sep",
		params = "(table str, string sep)",
		returns = "table",
		type = "function"
	},
	["string.len"] = {
		desc = "get length of string (binary safe)",
		params = "(string str)",
		returns = "number",
		type = "function"
	},
	["string.replace"] = {
		desc = "replace occurences in of arg2 with arg3",
		params = "(string arg1, string arg2, string arg3)",
		returns = "string result of arg1 with arg2 replaced",
		type = "function"
	},
	["string.split"] = {
		desc = "split a string into substring",
		params = "(string str, string sep)",
		returns = "table of substrings in str separated by sep",
		type = "function"
	},
	["string.startswith"] = {
		desc = "case sensitive substring search",
		params = "(string str1, string str2)",
		returns = "true if the start of str1 matches str2",
		type = "function"
	},
	["string.str"] = {
		desc = "case sensitive substring search",
		params = "(string stack, string needle)",
		returns = "string stack starting where needle was found, or null if not found",
		type = "function"
	},
	["string.istr"] = {
		desc = "case insensitive substring search",
		params = "(string stack, string needle)",
		returns = "string stack starting where needle was found, or null if not found",
		type = "function"
	},
	["string.sub"] = {
		desc = "get a substring of str, starting at arg2 and ending at arg3.\r\nif arg2 is negative it will be read as an index counting back from the end of the string.\r\narg3 is implicitly the end of the string",
		params = "(string str, number arg2[, number arg3])",
		returns = "string starting at arg2 and ending at arg3",
		type = "function"
	},
	["string.tostring"] = {
		desc = "generic method for objects to convert data to a string",
		params = "(object arg1)",
		returns = "string format of arg1",
		type = "function"
	},
	["string.tolower"] = {
		desc = "get lowercase version of string",
		params = "(string str)",
		returns = "string",
		type = "function"
	},
	["string.toupper"] = {
		desc = "get uppercase version of string",
		params = "(string str)",
		returns = "string",
		type = "function"
	},
	["system"] = {
		desc = "execute a system function",
		params = "",
		returns = "",
		type = "function"
	},
	["table"] = {
		desc = "class of functions for working with tables",
		type = "table"
	},
	["table.iname"] = {
		desc = "Returns the name of a table entry at a given index.",
		params = "",
		returns = "",
		type = "function"
	},
	["table.ival"] = {
		desc = "Returns a pointer to the value of a table entry at a given index.",
		params = "",
		returns = "",
		type = "function"
	},
	["table.sortbyname"] = {
		desc = "function for sorting table contents by name",
		params = "",
		returns = "",
		type = "function"
	},
	["table.sortbykey"] = {
		desc = "function for sorting table by each item's subkey",
		params = "",
		returns = "",
		type = "function"
	},
	["table.zlink"] = {
		desc = "link one table to another in an overlapping manner, i.e. class inheritance",
		params = "",
		returns = "",
		type = "function"
	},
	["thread"] = {
		desc = "class of functions for working with threads (experimental)",
		type = "table"
	},
	["thread.thread"] = {
		desc = "constructor for new threads",
		params = "",
		returns = "",
		type = "function"
	},
	["thread.start"] = {
		desc = "begin execution of thread function 'this.fn'",
		params = "",
		returns = "",
		type = "function"
	},
	["thread.finish"] = {
		desc = "called by the thread to finish execution",
		params = "",
		returns = "",
		type = "function"
	},
	["thread.mutex"] = {
		desc = "class of functions for working with thread mutexes (experimental)",
		type = "table"
	},
	["thread.mutex.mutex"] = {
		desc = "constructor for new thread mutexes",
		params = "",
		returns = "",
		type = "function"
	},
	["thread.mutex.lock"] = {
		desc = "acquire a lock",
		params = "",
		returns = "",
		type = "function"
	},
	["thread.mutex.unlock"] = {
		desc = "release a lock",
		params = "",
		returns = "",
		type = "function"
	},
	["thread.mutex.free"] = {
		desc = "destroy the mutex",
		params = "",
		returns = "",
		type = "function"
	},
	["time"] = {
		desc = "functions for dealing with time",
		type = "table"
	},
	["time.gmtime"] = {
		desc = "get detailed structure describing a given time in seconds (or now) since 1970-01-01",
		params = "([number seconds])",
		returns = "table describing requested time in format\r\n { tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday, tm_yday, tm_isdst }",
		type = "function"
	},
	["time.gettimeofday"] = {
		desc = "get seconds and milliseconds since 1970-01-01 (aka unix time)",
		params = "",
		returns = "table representing time in format { tv_sec, tv_usec }",
		type = "function"
	},
	["time.localtime"] = {
		desc = "get detailed structure describing a given time in seconds (or now) since 1970-01-01",
		params = "([number seconds])",
		returns = "table describing requested time in format\r\n { tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday, tm_yday, tm_isdst }",
		type = "function"
	},
	["time.sqldate"] = {
		desc = "output date as a string from time.gmtime data or seconds since 1970-01-01",
		params = "([table time]||[number time])",
		returns = "string representing requested time in yyyy-MM-dd format",
		type = "function"
	},
	["time.sqltime"] = {
		desc = "output time as a string from time.gmtime data or seconds since 1970-01-01",
		params = "([table time]||[number time])",
		returns = "string representing requested time in HH:mm:ss format",
		type = "function"
	},
	["time.sqldatetime"] = {
		desc = "output date and time as a string from time.gmtime data or seconds since 1970-01-01",
		params = "([table time]||[number time])",
		returns = "string representing requested time in yyyy-MM-dd HH:mm:ss format",
		type = "function"
	},
	["time.sqltounix"] = {
		desc = "get unix time from sql formatted time",
		params = "(string sqltime)",
		returns = "number of seconds since 1970-01-01",
		type = "function"
	},
	["time.now"] = {
		desc = "get seconds since 1970-01-01 (aka unix time)",
		params = "none",
		returns = "number of seconds from 1970-01-01 to now",
		type = "function"
	},
	["tonumber"] = {
		desc = "convert a string to its numeric value",
		params = "",
		returns = "",
		type = "function"
	},
	["typeof"] = {
		desc = "get the type of a variable",
		params = "(object arg1)",
		returns = "string with the name of the base object type",
		type = "function"
	},
	["win"] = {
		desc = "collection of functions for Windows UI",
		type = "table"
	},
	["win.Beep"] = {
		desc = "beep at the requested frequency for the requested duratin (in milliseconds)",
		params = "",
		returns = "",
		type = "function"
	},
	["win.CreateProcess"] = {
		desc = "function to execute a program",
		params = "",
		returns = "",
		type = "function"
	},
	["win.MessageBox"] = {
		desc = "native windows function to display a messagebox",
		params = "",
		returns = "",
		type = "function"
	},
	["win.PlaySound"] = {
		desc = "plays a sound file",
		params = "",
		returns = "",
		type = "function"
	},
	["win.ShellExecute"] = {
		desc = "native windows function for opening a file with its associated application",
		params = "",
		returns = "",
		type = "function"
	},
	["write"] = {
		desc = "write a single unformatted string to console",
		params = "(string arg1)",
		returns = "number of bytes written",
		type = "function"
	}
}
