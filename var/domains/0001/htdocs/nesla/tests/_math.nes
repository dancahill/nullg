#!/usr/bin/nesla
if (typeof(expect)!='function') include("_expect.nes");

#ifdef __USE_GNU
# define M_El           2.7182818284590452353602874713526625L  /* e */
# define M_LOG2El       1.4426950408889634073599246810018921L  /* log_2 e */
# define M_LOG10El      0.4342944819032518276511289189166051L  /* log_10 e */
# define M_LN2l         0.6931471805599453094172321214581766L  /* log_e 2 */
# define M_LN10l        2.3025850929940456840179914546843642L  /* log_e 10 */
# define M_PIl          3.1415926535897932384626433832795029L  /* pi */
# define M_PI_2l        1.5707963267948966192313216916397514L  /* pi/2 */
# define M_PI_4l        0.7853981633974483096156608458198757L  /* pi/4 */
# define M_1_PIl        0.3183098861837906715377675267450287L  /* 1/pi */
# define M_2_PIl        0.6366197723675813430755350534900574L  /* 2/pi */
# define M_2_SQRTPIl    1.1283791670955125738961589031215452L  /* 2/sqrt(pi) */
# define M_SQRT2l       1.4142135623730950488016887242096981L  /* sqrt(2) */
# define M_SQRT1_2l     0.7071067811865475244008443621048490L  /* 1/sqrt(2) */
#endif

function testmath() {
	if (math.asin) {
		local pi = math.asin(1)*2;
	} else {
		local pi = 3.1415926535897932384626433832795029;
	}
	local n=0;
	local x=0;

	#operator precedence
	x = 4 + 5 * 3;
	expect("4+5*3", 19, x);
	x=12 % 5 * 2;
	expect("12%5*2", 4, x);
	x = (4 + 5) * 3;
	expect("(4+5)*3", 27, x);

	x = 5*3+2-1*0;
	expect("5*3+2-1*0", 17, x);

	x = 25 - (2 * (10 + (8 / 2)));
	expect("25-(2*(10+(8/2)))", -3, x);

	expect("1+2*4",   9,  1+2*4);
	expect("(1+2)*4", 12, (1+2)*4);
	expect("1+(2*4)", 9,  1+(2*4));

	n=42; expect("n=42",       42,      n);
	n+=5; expect("n+=5",       47,      n);
	n-=2; expect("n-=2, n+5",  50,      n+5);
	      expect("      n+5",  50,      (n+5));
	n*=3; expect("n*=3",       135,     (n));
	n/=4; expect("n/=4",       33.75,   (n));
	n=42; expect("n=42, n--",  "42 41", tostring(n--)+" "+tostring(n));
	n=42; expect("n=42, n++",  "42 43", tostring(n++)+" "+tostring(n));
	n=42; expect("n=42, --n",  "41 41", tostring(--n)+" "+tostring(n));
	n=42; expect("n=42, ++n",  "43 43", tostring(++n)+" "+tostring(n));

	expect("(n++)",              43,         (n++));
	expect("(n--)",              44,         (n--));
	expect("(n)",                43,         (n));
	expect("3-1.5",              1.5,        (3-1.5));
	expect("-4+1.5",             -2.5,       (-4+1.5));
	expect("-1.5",               -1.5,       -1.5);
	expect("math.abs(-4.2)",     4.2,        math.abs(-4.2));
	expect("math.ceil(2.1)",     3,          math.ceil(2.1));
	expect("math.floor(2.1)",    2,          math.floor(2.1));
	expect("pi*(2+(1+1))",       "12.56637", pi*(2+(1+1)));
	if (typeof(math.sqrt)=='function') expect("math.sqrt(2)",       "1.414213", math.sqrt(2));
	expect("(pi*(4+(4-1+2)))/9", 3.141592,   (pi*(4+(4-1+2)))/9);
	print("\t\t3.141593, actually, but rounding doesn't work\n");

	print("\tmath.rand()         = ", math.rand());
	for (i=0;i<4;i++) print(", ", math.rand());
	print("\n");
	print("\tmath.rand(10)       = ", math.rand(10));
	for (i=0;i<11;i++) print(", ", math.rand(10));
	print("\n");

//	print("\nexpect a divided by zero warning and a null return val\n");
	expect("1/0",                'null',     tostring(1/0));
	return;
}
testmath();
global testmath=null;
