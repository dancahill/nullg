#!/usr/bin/nesla
if (typeof(expect)!='function') include("_expect.ns");
function teststring() {
	local x=string.cat(string.cat("Aa", "Bb"), "CcDd");
	expect("x",                     "AaBbCcDd", x);
	expect("string.sub(x,1,2)",     "aB",     string.sub(x, 1, 2));
	expect("string.sub(x,4,1)",     "C",      string.sub(x, 4, 1));
	expect("string.len(x)",         8,        string.len(x));
	expect("string.cmp(x)",         -32,      string.cmp(x, "aabbccdd"));
	expect("string.cmp(x)",         32,       string.cmp("aabbccdd", x));
	expect("string.icmp(x)",        0,        string.icmp(x, "aabbccdd"));
	expect("string.ncmp(x)",        -32,      string.ncmp(x, "aabb", 4));
	expect("string.nicmp(x)",       0,        string.nicmp(x, "aabb", 4));
	expect("string.sub(x)",         "is a",   string.sub("this is a test.", 5, 4));
	expect("string.sub(x)",         "test",   string.sub("this is a test.", -5, 4));

	expect("x='x'*8",               "xxxxxxxx", 'x'*8);
	local x='yy';
	expect("x='yy';x*=3",           "yyyyyy",   x*=3);

	expect("'123'=='456'",          false,    '123'=='456');
	expect("'123'>='456'",          false,    '123'>='456');
	expect("'123'>'456'",           false,    '123'>'456');
	expect("'123'=='123'",          true,     '123'=='123');
	expect("'123'==123",            true,     '123'==123);
	expect("123=='123'",            true,     123=='123');
	expect("'123'!='456'",          true,     '123'!='456');
	expect("'123'<='456'",          true,     '123'<='456');
	expect("'123'<'456'",           true,     '123'<'456');
	expect("'123'+'456'",           "123456", '123'+'456');
//	expect("'123\0456'",            "123\0456", '123\0456');
	expect("123+'456'",             579,      123+'456');
	expect("1+\"a\"+2+\"b\"+3",     6,        1+"a"+2+"b"+3);
	expect("1+\"2\"+3+\"4\"+5",     15,       1+"2"+3+"4"+5);
	expect("\"a\"+1+\"b\"+2+\"c\"", "a1b2c",  "a"+1+"b"+2+"c");
	expect("tonumber('123')+1", 124,  tonumber('123')+1);
	x=string.split("aa|bb|cc|dd", "|");
	expect("string.split()",  "aa+bb+cc+dd+null", x[0]+'+'+x[1]+'+'+x[2]+'+'+x[3]+'+'+tostring(x[4]));
	x=string.split("aa|bb|cc|dd|", "|");
	expect("string.split()",  "aa+bb+cc+dd+", x[0]+'+'+x[1]+'+'+x[2]+'+'+x[3]+'+'+tostring(x[4]));
	x=string.split("aaz|zbbz|zccz|zddz|z", "z|z");
	expect("string.split()",  "aa+bb+cc+dd+", x[0]+'+'+x[1]+'+'+x[2]+'+'+x[3]+'+'+tostring(x[4]));
	local x="1|2|3|4|5|6|7";
	while (x==true) {
		print("\t", x, "\n");
		if ((x=string.str(x, "|"))!=null) {
			x=string.sub(x, 1, 42);
		}
	}
	expect("string.atoi('abc',0)",  97,       string.atoi("abc", 0));
	expect("string.atoi('abc',1)",  98,       string.atoi("abc", 1));
	expect("string.atoi('abc',2)",  99,       string.atoi("abc", 2));
	expect("string.atoi('abc',3)",  -1,       string.atoi("abc", 3));
	expect("string.itoa(97)",       'a',      string.itoa(97));
	return;
}
teststring();
global teststring=null;
