#!/usr/bin/nesla
if (typeof(expect)!='function') include("_expect.ns");
function testscope() {
	local subf1 = function (p1, p2) {
		local p3="b";
		expect("testing subscope", "[5][x][b]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
		return;
	}
	local subf2 = function (p1, p2, p3) {
		expect("testing subscope(t)", "[5][x][1][null]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3.a)+"]["+tostring(p3.c)+"]");
		return;
	}
	local subf3 = function (p1, p2, p3) {
		expect("testing subscope(t)", "[5][x][null][2]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3.a)+"]["+tostring(p3.c)+"]");
		return;
	}
	function subf4(i) {
		local ack = { aa=1, bb=2 };
		return ack;
	}
	function subf5(i) {
		print("[", i, "]");
		if (i<5) subf5(i+1);
		print("[", i, "]");
		return 42;
	}
	local p3="a";
	local ack = { a=1, b = { c=2 } };

	expect("testing scope",    "[null][null][a]",  "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
	subf1(5, "x");
	expect("testing scope",    "[null][null][a]",  "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
	subf2(5, "x", ack);
	subf3(5, "x", ack.b);
	expect("testing scope",    "[null][null][a]",  "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
	scopetab=subf4(0);
	expect("testing scopetab", "[table][1][2]",    "["+typeof(scopetab)+"]["+tostring(scopetab.aa)+"]["+tostring(scopetab.bb)+"]");

	print("\t");
	i=subf5(0);
	print("\n");

	expect("subtab=subf4(0)",  "(table)2",         "("+typeof(scopetab)+")"+tostring(scopetab.bb));
	expect("i=subf5(0)",       "(number)42",       "("+typeof(i)+")"+tostring(i));
	return;
}
testscope();
global testscope=null;
