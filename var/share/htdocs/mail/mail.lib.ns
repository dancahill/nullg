global mail = {
	getaddr = function (x) {
		x0=net.mime.decode_rfc2047(x);
		if (typeof(x0)!='string') return { name=x, addr=x, full=x };
		if ((x1=x0.str("<"))==null) return { name=x0, addr=x0, full=x0 };
		if ((x2=x1.str(">"))==null) return { name=x0, addr=x0, full=x0 };
		name=x0.replace(x1, "");
		addr=x1.sub(1, x1.len()-x2.len()-1);
		while (name.sub(-1, 1)==" ") name=name.sub(0, name.len()-1);
		if (name.sub(0, 1)=="\"" && name.sub(-1, 1)=="\"") name=name.sub(1, name.len()-2);
		if (name=="") name=addr;
		return { name=name, addr=addr, full=x0 };
	};
	load_header_from_sql = function (mailheaderid, uidl) {
		var userid   = tonumber(mailheaderid);
		var userid   = tonumber(_USER['userid']);
		var domainid = tonumber(_USER['domainid']);

		if (userid==0 || domainid==0) return null;
		query=sprintf("SELECT * FROM gw_email_headers WHERE obj_uid = %d AND obj_did = %d", userid, domainid);
		if (mailheaderid!=null) query+=sprintf(" AND mailheaderid = %d", mailheaderid);
		if (uidl!=null) query+=sprintf(" AND uidl = '%s'", sql_escape(uidl));
		sqr=sqlquery(query);
		if (sqr._tuples==1) return sqr['_rows'][0];
		return null;
	};
	save_header_to_sql = function (newemailid, accountrow, message, uidl, size) {
		local function getheader(x) {
			if (typeof(x)=='string') return x;
			return "";
		}
		var userid      = tonumber(_USER['userid']);
		var accountid   = tonumber(accountrow['mailaccountid']);
		var domainid    = tonumber(_USER['domainid']);
		var from        = getheader(message['head']['from']);
		var to          = getheader(message['head']['to']);
		a=mail.getaddr(getheader(message['head']['reply-to']));
		var replyto     = a.addr;
		if (replyto=="") {
			a=mail.getaddr(from);
			replyto=a.addr;
		}
		var subject     = getheader(message['head']['subject']);
		var boundary    = getheader(message['boundary']);
		var dt          = tonumber(message['head']['date_numeric']);
		var messageid   = getheader(message['head']['message-id']);
		var inreplyto   = getheader(message['head']['in-reply-to']);
		var contenttype = getheader(message['head']['content-type']);
		var encoding    = getheader(message['head']['content-transfer-encoding']);
		query=sprintf("INSERT INTO gw_email_headers (mailheaderid, obj_uid, obj_gid, obj_did, obj_gperm, obj_operm, accountid, folder, status, size, uidl,hdr_from, hdr_replyto, hdr_to, hdr_cc, hdr_bcc, hdr_subject, hdr_date, hdr_messageid, hdr_inreplyto, hdr_contenttype, hdr_boundary, hdr_encoding, hdr_scanresult)"+
			" VALUES (%d, %d, 0, %d, 0, 0, %d, %d, 'n', %d, '%s', '%s', '%s', '%s', '', '', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '');"
			, newemailid
			, userid
			, domainid
			, accountid
			, 1 //folderid
			, size
			, uidl
			, sql_escape(from)
			, sql_escape(replyto)
			, sql_escape(to)
			, net.mime.decode_rfc2047(sql_escape(subject))
			, time.sqldatetime(dt)
			, sql_escape(messageid)
			, sql_escape(inreplyto)
			, sql_escape(contenttype)
			, sql_escape(boundary)
			, sql_escape(encoding)
		);
		sqlupdate(query);
	};
	print_header_menu = function () {
		print("<div class=\"tbar\" style=\"text-align:left;width:100%\">\r\n");
		print("<a href='/mail/list' onclick=\"return GoTo('/mail/list');\">LIST</a>");
		print("&nbsp;&middot;&nbsp;");
		print("<a href='/mail/sync' onclick=\"return GoTo('/mail/sync');\">SYNC</a>");
		print("</div>\r\n");
	};
	sync = {
		pop3_sync = function (row) {
			local function pad(s, p) {
				s='0'*p+tostring(s);
				return string.sub(s, string.len(s)-p, p);
			}
			var userid = tonumber(_USER['userid']);
			var newmail=0;
			var var_domains_path=MASTERGLOBAL['CONFIG']['var_domains_path'];
			var tmpdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(0, 4));
			pop=new net.pop3.client();
			pop.username = row['popusername'];
			pop.password = base64.decode(row['poppassword']);
			pop.host     = row['pophost'];
			pop.port     = tonumber(row['popport']);
			pop.use_ssl  = row['popssl']=="1"?true:false;
			if (pop.open()!=true) {
				printf("pop.open() failed");
				printf("[pop.last_err=%s]", pop.last_err);
			}
			stat=pop.stat();
			count=stat.count;
			if (count==1) plural=''; else plural='s';
			print("<br>E-mail status for "+row['accountname']+"<br>You have "+count+" message"+plural+"\r\n");
			if (typeof(file.stat(tmpdirname))!='table') file.mkdir(tmpdirname);
			for (i=1;i<=count;i++) {
				uidl=pop.uidl(i);
				//row=load_header_from_sql(null, string.replace(base64.encode(uidl), '=', ''));
				
				query=sprintf("SELECT * FROM gw_email_headers WHERE obj_uid = %d AND uidl = '%s';", userid, string.replace(base64.encode(uidl), '=', ''));
				var sqr=sqlquery(query);
				if (sizeof(sqr['_rows'])!=0) {
					hrow=sqr['_rows'][0];
					//print("sqr=<pre>",serialize(hrow),"</pre>");
					//printf("<br>matches existing email from [%s] [%s]...", html_encode(hrow['hdr_from']), html_encode(hrow['hdr_subject']));
					//io.flush();
					continue;
				} else {
					newmail++;
					newemailid=sqlgetsequence("gw_email_headers");
					filename=sprintf("%s.msg", pad(newemailid, 6));
					printf("<br>saving '%s' in '%s/'", filename, tmpdirname);
					msgbody=pop.retr(i);
					message=net.mime.read(msgbody);
					//print("message=<pre>",html_encode(serialize(message)),"</pre>");
					//print("message=<pre>",html_encode(serialize(message.head)),"</pre>");
					//print("sqr=<pre>",html_encode(serialize(hrow)),"</pre>");
					if (typeof(file.stat(tmpdirname+"/"+filename))!='table') {
						file.write(tmpdirname+"/"+filename, msgbody);
					}
					mail.save_header_to_sql(newemailid, row, message, string.replace(base64.encode(uidl), '=', ''), sizeof(msgbody));
					print(".");
					//print(query, "<br><br>");
					io.flush();
					var dstdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(1, 4));
					if (typeof(file.stat(dstdirname))!='table') file.mkdir(dstdirname);
					file.rename(tmpdirname+"/"+filename, dstdirname+"/"+filename);
				}
			}
			pop.close();
			printf("<br>New Emails = %d", newmail);
			return;
		};
		dir_sync = function (row) {
			var userid = tonumber(_USER['userid']);
			local function pad(s, p) {
				s='0'*p+tostring(s);
				return s.sub(s.len()-p, p);
			}
			var var_domains_path=MASTERGLOBAL['CONFIG']['var_domains_path'];
			var tmpdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(0, 4));
			var dstdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(1, 4));
			if (typeof(file.stat(tmpdirname))!='table') {
				file.mkdir(tmpdirname);
				if (typeof(file.stat(tmpdirname))!='table') {
					printf("%s doesn't exist!", tmpdirname);
				}
			}
			if (typeof(file.stat(dstdirname))!='table') {
				file.mkdir(dstdirname);
				if (typeof(file.stat(dstdirname))!='table') {
					printf("%s doesn't exist!", dstdirname);
				}
			}
			importdirname="/usr/local/nullsd/var/tmp/import";
			_d=dirlist(importdirname);
			foreach (f in _d) {
				if (f.type!="file") continue;
				if (string.sub(f.name, -5, 5)==".done") continue;
				print("file=<pre>",serialize(f),"</pre>");
				newemailid=sqlgetsequence("gw_email_headers");
				filename=sprintf("%s.msg", pad(newemailid, 6));
				printf("saving '%s' in '%s/'<br>", filename, tmpdirname);
				srcname=importdirname+"/"+f.name;
				if (typeof(file.md5)!='function') {
					print("file.md5() missing\n");
					break;
				}
				uidl="file:"+file.md5(srcname);
				msgbody=file.read(srcname);
				message=net.mime.read(msgbody);
				tmpname=tmpdirname+"/"+filename;
				dstname=dstdirname+"/"+filename;
				if (typeof(file.stat(tmpname))=='table') {
					printf("file %s already exists!", tmpname);
					break;
				}
				file.rename(srcname, tmpname);
				if (typeof(file.stat(tmpname))!='table') {
					printf("failed to write file %s!", tmpname);
					break;
				}
				mail.save_header_to_sql(newemailid, row, message, uidl, sizeof(msgbody));
				print(".");
				io.flush();
				file.rename(tmpname, dstname);
			}
			return;
		};
		dosync = function (accountrow) {
			//if (accountrow['mailaccountid']!='2') return;
			//print("<pre>",serialize(accountrow),"</pre>");
			if (accountrow['hosttype']=="POP3") {
				pop3_sync(accountrow);
				//dir_sync(accountrow);
				//printf("<br>sync is disabled for now");
			} else {
				printf("<br>Unknown Host Type '%s'", accountrow['hosttype']);
			}
		};
	};
};



















global htselect = {
	mailjump = function (sid, accountid, folderid) {


		return;






		var menustyle = tonumber(_USER['pref']['menustyle']);
		var userid    = tonumber(_USER['userid']);

	//	if (!(auth_priv(sid, "email")&A_READ)) return;
		sqr1=sqlquery(sprintf("SELECT mailaccountid, accountname FROM gw_email_accounts WHERE obj_uid = %d order by accountname ASC", userid));
		if (sqr1['_tuples']==0) return;

		printf("<SCRIPT LANGUAGE=\"javascript\">\r\n");
		printf("<!--\r\n");
		printf("function ChangeMail() {\r\n");
		printf("	%slocation.replace('%s/mail/%s?'+document.mailjump.accountid.options[document.mailjump.accountid.selectedIndex].value);\r\n", menustyle>0?"top.gwmain.":"", _SERVER['SCRIPT_NAME'], menustyle>0?"main":"list");
		printf("}\r\n");
		printf("document.write('<SELECT NAME=accountid style=\"width:250px\" onChange=\"ChangeMail()\">');\r\n");

		local function add_folders(add_folders, sqr2, account, parent, depth) {
			foreach (fldrow in sqr2['_rows']) {
				folderid=tonumber(fldrow['mailfolderid']);
				parentid=tonumber(fldrow['parentfolderid']);
				if (parentid==parent) {
					printf("document.write('<OPTION VALUE=\"accountid=%d&folderid=%d\">&nbsp;&nbsp;&nbsp;&nbsp;", account, folderid);
					for (indent=0;indent<depth;indent++) printf("&nbsp;&nbsp;&nbsp;&nbsp;");
					printf("%s", str2html(fldrow['foldername']));
	//				if ((account==accountid)&&(x==folderid)) printf(" - (Current)");
					printf("');\r\n");
					add_folders(add_folders, sqr2, account, folderid, depth+1);
				}
			}
		}

		foreach (acctrow in sqr1['_rows']) {
			//account=tonumber(sqr1['_rows'][0]['mailaccountid']);
			account=tonumber(acctrow['mailaccountid']);

			printf("document.write('<OPTION VALUE=\"accountid=%d&folderid=1\"", account);
			if (account==accountid) printf(" SELECTED CLASS=selBold");
			printf(">[ %s ]", str2html(acctrow['accountname']));
			//if (account==accountid) printf(" - %s", x>-1?str2html(sql_getvalue(&sqr2, x, 2)):"");
			printf("');\r\n");

			//printf("foreach (acctrow in sqr1['_rows']) {) %d %d", accountid, account);
			if (account==accountid) {
				sqr2=sqlquery(sprintf("SELECT mailfolderid, parentfolderid, foldername FROM gw_email_folders WHERE obj_uid = %d and accountid = %d ORDER BY parentfolderid ASC, foldername ASC", userid, account));
				if (sqr2['_tuples']==0) continue;

	//			for (j=0;j<sql_numtuples(&sqr2);j++) {
	//				x=atoi(sql_getvalue(&sqr2, ptree[j].id, 0));
	//				printf("document.write('<OPTION VALUE=\"accountid=%d&folderid=%d\">&nbsp;&nbsp;&nbsp;&nbsp;", account, x);
	//				for (indent=0;indent<ptree[j].depth;indent++) printf("&nbsp;&nbsp;&nbsp;&nbsp;");
	//				printf("%s", str2html(sql_getvalue(&sqr2, ptree[j].id, 2)));
	//				if ((account==accountid)&&(x==folderid)) printf(" - (Current)");
	//				printf("');\r\n");
	//			}
				add_folders(add_folders, sqr2, account, 0, 1);
			}




	/*
			account=atoi(sql_getvalue(&sqr1, i, 0));
			base=0;
			depth=1;
			indent=0;
			if (sql_queryf(&sqr2, "SELECT mailfolderid, parentfolderid, foldername FROM gw_email_folders WHERE obj_uid = %d and accountid = %d ORDER BY parentfolderid ASC, foldername ASC", sid->dat->user_uid, account)<0) continue;
			if (sql_numtuples(&sqr2)<1) {
				sql_freeresult(&sqr2);
				wmfolder_makedefaults(account);
				if (sql_queryf(&sqr2, "SELECT mailfolderid, parentfolderid, foldername FROM gw_email_folders WHERE obj_uid = %d and accountid = %d ORDER BY parentfolderid ASC, foldername ASC", sid->dat->user_uid, sid->dat->user_mailcurrent)<0) continue;
			}
			btree=calloc(sql_numtuples(&sqr2)+2, sizeof(_btree));
			ptree=calloc(sql_numtuples(&sqr2)+2, sizeof(_ptree));
			k=0;
			widthloop:
			for (j=base;j<sql_numtuples(&sqr2);j++) {
				if (btree[j].printed) continue;
				if (atoi(sql_getvalue(&sqr2, j, 1))==btree[depth].lastref) {
					ptree[k].id=j;
					ptree[k].depth=depth-1;
					k++;
					btree[depth+1].lastref=atoi(sql_getvalue(&sqr2, j, 0));
					btree[j].printed=1;
					depth++;
				}
			}
			if (depth>0) {
				depth--;
				goto widthloop;
			}
			base++;
			btree[depth].lastref=0;
			depth=0;
			if (base<sql_numtuples(&sqr2)) {
				goto widthloop;
			}
			x=-1;
			for (j=0;j<sql_numtuples(&sqr2);j++) {
				if (atoi(sql_getvalue(&sqr2, j, 0))==folderid) x=j;
			}
			printf("document.write('<OPTION VALUE=\"accountid=%d&folderid=1\"", account);
			if (account==accountid) printf(" SELECTED CLASS=selBold");
			printf(">[ %s ]", str2html(sql_getvalue(&sqr1, i, 1)));
			if (account==accountid) printf(" - %s", x>-1?str2html(sql_getvalue(&sqr2, x, 2)):"");
			printf("');\r\n");
			if (account==accountid) {
				for (j=0;j<sql_numtuples(&sqr2);j++) {
					x=atoi(sql_getvalue(&sqr2, ptree[j].id, 0));
					printf("document.write('<OPTION VALUE=\"accountid=%d&folderid=%d\">&nbsp;&nbsp;&nbsp;&nbsp;", account, x);
					for (indent=0;indent<ptree[j].depth;indent++) printf("&nbsp;&nbsp;&nbsp;&nbsp;");
					printf("%s", str2html(sql_getvalue(&sqr2, ptree[j].id, 2)));
					if ((account==accountid)&&(x==folderid)) printf(" - (Current)");
					printf("');\r\n");
				}
			}
			free(ptree);
			free(btree);
			sql_freeresult(&sqr2);
	*/
		}
		printf("document.write('</SELECT>');\r\n");
		printf("//-->\r\n");
		printf("</SCRIPT>\r\n");
		printf("<NOSCRIPT>\r\n");
		printf("<SELECT NAME=accountid>\r\n");
		foreach (acctrow in sqr1['_rows']) {
			account=tonumber(acctrow['mailaccountid']);
			selected=(account==accountid)?" SELECTED":"";
	//		printf("<OPTION VALUE='%d'", account);
	//		if (account==accountid) printf(" SELECTED");
	//		printf(">%s</OPTION>\r\n", str2html(acctrow['accountname']));

			printf("<OPTION VALUE='%d'%s>%s</OPTION>\r\n", account, selected, str2html(acctrow['accountname']));

		}
		printf("</SELECT><INPUT TYPE=SUBMIT CLASS=frmButton NAME=submit1 VALUE='GO'>\r\n");
		printf("<SELECT NAME=folderid>\r\n");
	//	htselect_mailfolder(folderid, 0, 0);
		printf("</SELECT><INPUT TYPE=SUBMIT CLASS=frmButton NAME=submit2 VALUE='GO'>\r\n");
		printf("</NOSCRIPT>\r\n");
		return;
	};
};
