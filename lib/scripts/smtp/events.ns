/*
nsd smtp event class
custom version in var/share/scripts/smtp/events.ns
standard version in lib/scripts/smtp/events.ns
*/
namespace nsd.smtp {
	class events {
		function prefilter() {
			try {
				r=this.ip2location();
				cc=_SERVER['REMOTE_COUNTRY_CODE'].tostring();
				if (cc=="RU"||cc=="CN") {
					reason=sprintf("%s (%s) banned", _SERVER['REMOTE_COUNTRY_NAME'], _SERVER['REMOTE_COUNTRY_CODE']);
					q=sprintf("INSERT INTO gw_smtp_relayrules (relayruleid, ipaddress, ruletype, persistence, expires, reason) VALUES (0, '%s', 'deny', 'temp', '%s', '%s')", _SERVER['REMOTE_ADDR'], time.sqltime(time.now()+43200), reason.sub(0, 60));
					logaccess(sprintf("%s:%d -- %s", _SERVER['REMOTE_ADDR'], _SERVER['REMOTE_PORT'], q));
					sql.update(q);
				}
			} catch (ex) {
				logaccess(sprintf("prefilter() EXCEPTION: %s", ex.description));
			}
			return 0;
		}
		function addfilter(reason) {
			try {
				r=this.ip2location();
				reason=sprintf("%s from %s (%s)", reason, _SERVER['REMOTE_COUNTRY_NAME'], _SERVER['REMOTE_COUNTRY_CODE']);
				q=sprintf("INSERT INTO gw_smtp_relayrules (relayruleid, ipaddress, ruletype, persistence, expires, reason) VALUES (0, '%s', 'deny', 'temp', '%s', '%s')", _SERVER['REMOTE_ADDR'], time.sqltime(time.now()+3600), reason.sub(0, 60));
				logaccess(sprintf("%s:%d -- %s", _SERVER['REMOTE_ADDR'], _SERVER['REMOTE_PORT'], q));
				sql.update(q);
			} catch (ex) {
				logaccess(sprintf("addfilter() EXCEPTION: %s", ex.description));
			}
			return 0;
		}
		function postfilter() {
			try {
			} catch (ex) {
				logaccess(sprintf("postfilter() EXCEPTION: %s", ex.description));
			}
			return 0;
		}
		function ip2location() {
			try {
				db="/usr/local/nullsd/var/db/ip2location.db";
				if (file.stat(db)==null) return null;
				ip2=_SERVER['REMOTE_ADDR'];
				ip2=ip2.split('.');
				if (ip2.length()!=4) throw "ip2 length wrong";
				ip=tonumber(ip2[0])*16777216 + tonumber(ip2[1])*65536 + tonumber(ip2[2])*256 + tonumber(ip2[3]);
				dl.load("data");
				dl.load("sqlite3");
				global sqlconn=new data.sqlite3.client();
				sqlconn.database=db;
				sqlconn.open();
				sqlconn.query(sprintf("select * from ip2location_db1 where ip_from<=%d and ip_to>=%d;", ip, ip));
				if ((row=sqlconn.getnext())!=null) {
					global status = { r=serialize(row); };
					if (row['country_code']) _SERVER['REMOTE_COUNTRY_CODE']=row['country_code'];
					if (row['country_name']) _SERVER['REMOTE_COUNTRY_NAME']=row['country_name'];
				}
				logaccess(sprintf("%s:%d -- Remote Country = '%s' (%s)", _SERVER['REMOTE_ADDR'], _SERVER['REMOTE_PORT'], _SERVER['REMOTE_COUNTRY_NAME'], _SERVER['REMOTE_COUNTRY_CODE']));
				sqlconn.endquery();
				sqlconn.close();
				delete sqlconn;
				return row;
			} catch (ex) {
				logaccess(sprintf("ip2location() EXCEPTION: %s", ex.description));
			}
			return null;
		}
	}
}
