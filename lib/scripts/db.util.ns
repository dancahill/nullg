namespace db {
	class dbutil {
		function dbutil() {
			//print("util constructor\r\n");
			//print("CONFIG="+serialize(CONFIG.sql)+";\r\n");
			//include("db.schema.ns");
			//print("\r\n"+serialize(_GLOBALS));
			this.options={ command="", option="", sqltype=CONFIG.sql.sql_server_type };
			if (typeof(this.options.sqltype)!="string") throw "sqltype not found";
		}

		function dump() {
			print("dbutil dump\r\n");
			io.flush();
			this.db_dump();
			print("dump() done.\r\n");
		}

		function init() {
			print("dbutil init\r\n");
			io.flush();
			if (this.options.rootpass==null || this.options.rootpass=="") {
				printf("Failing to provide a new password for the administrator account may leave\r\n");
				printf("your system vulnerable.  Now would be a REALLY good time to provide one.\r\n\r\n");
			}
			this.db_init();
			this.db_init_data();
			this.sequence_sync();
			this.table_check();
			print("init() done.\r\n");
		}

		function restore() {
			print("dbutil restore\r\n");
			io.flush();
			this.db_init();
			this.db_restore_data();
			this.sequence_sync();
			this.table_check();
			print("restore() done.\r\n");
		}

		function usage() {
			print("dbutil usage\r\n");
			printf("\r\nNullLogic GroupServer Database Utility [NullLogic GroupServer %s]\r\n", PACKAGE_VERSION);
			printf("Usage: %s command parameter\r\n\r\n", progname);
			printf("  command  Must be one of the following\r\n\r\n");
			printf("    INIT     Initializes a new database\r\n");
			printf("    DUMP     Dumps the data from the current database to a file\r\n");
			printf("    RESTORE  Restores the current database from a file\r\n");
			printf("\r\nThe INIT command is used to initialize a new NullLogic GroupServer database\r\n");
			printf("(as defined in nullsd.conf).  The parameter for this function\r\n");
			printf("is the password for the administrator account.\r\n");
			printf("\r\nThe DUMP command is used to export the contents of the current database\r\n");
			printf("(as defined in nullsd.conf) to a text file.  The parameter for this function\r\n");
			printf("is the name of the file to which the data is to be saved.\r\n");
			printf("\r\nThe RESTORE command is used to restore a previous database dump to the current\r\n");
			printf("database (as defined in nullsd.conf).  The parameter for this function is the\r\n");
			printf("name of the file from which the data is to be restored.\r\n");
			printf("\r\nNOTE: The INIT and RESTORE commands WILL destroy any current database before\r\n");
			printf("recreating it.  Be sure to use DUMP to make a backup prior to using the INIT\r\n");
			printf("and RESTORE commands.\r\n");
		}

		function db_init() {
			printf("db_init() Initialising %s database tables...", this.options.sqltype);
			linux=true;
			if (linux) {
				printf("\r\n");
				foreach (table_schema in db.schema) {
					if (typeof(table_schema)!='table') continue;
					printf("-");
				}
				printf("\r");
				io.flush();
			}
			foreach (table_schema in db.schema) {
				if (typeof(table_schema)!='table') continue;
				if (this.table_init(table_schema)==false) {
					print("sql error\r\n");
					return false;
				}
				if (linux) {
					printf("=");
					io.flush();
				}
			}
			if (linux) {
				printf("\r\n");
				io.flush();
			}
			printf("db_init() done.\r\n");
			return true;
		}

		function db_init_data() {
			printf("inserting default data into tables\r\n");
			io.flush();
			if (typeof(db.defaultdata)!='table') {
				printf("table 'db.defaultdata' not found\r\n");
				return false;
			}
			foreach (table_data in db.defaultdata) {
				if (typeof(table_data)!='string') continue;
				if (sql.update(table_data)==null) return false;
			}
			if (this.options.rootpass.length() > 0) {
				if (_sql_updatef(N, &qobj, "UPDATE gw_users SET password = '%s' WHERE userid = 1", rootpass) < 0) {
					printf("\r\nError setting root password\r\n");
					return false;
				}
				//password should be b64 encoded instead of hashed! fix later
				if (_sql_updatef(N, &qobj, "UPDATE gw_email_accounts SET poppassword = '%s' WHERE obj_did = 1 AND obj_uid = 1 AND mailaccountid = 1", rootpass) < 0) {
					printf("\r\nError setting root password\r\n");
					return false;
				}
			}
			this.table_check();
			this.sequence_sync();
		}

		function table_init(table_schema) {
			tablename = table_schema.name;
			indexname = table_schema.index;
			sequencename = table_schema.sequencename;
			primarykey = table_schema.primarykey;
			line = 0;
			query = sprintf("CREATE TABLE %s (\r\n\t", tablename);
			foreach (field in table_schema.fields) {
				if (typeof(field)!='table') continue;
				name = field[0];
				type = field[1];
				notnull = field[2];
				dflt = field[3];
				if (this.options.sqltype=="FBSQL") {
					if (type.toupper()=="TEXT") {
						type = "blob sub_type 1";
					}
				} else if (this.options.sqltype=="MYSQL") {
					// MYSQL error: Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause
					// "	activityid	int4		NOT NULL auto_increment,\n"
					// "	obj_ctime	datetime	NOT NULL DEFAULT '1970-01-01 00:00:00',\n"
					// "	obj_mtime	datetime	NOT NULL DEFAULT '1970-01-01 00:00:00',\n"
					// this needs a proper fix here.
					// apparently this is fine in mysql but still broken in mariadb
					if (dflt=="current_timestamp" && name!="obj_ctime") {
						dflt="'1970-01-01 00:00:00'";
						//dflt=null;
						//notnull="";
					}
				}
				if (line > 0) {
					query+=sprintf(",\r\n\t");
				}
				line++;
				query+=sprintf("%s %s", string.sub(name+" "*20, 0, 20), string.sub(type+" "*20, 0, 20));
				if (dflt!=null) {
					query+=sprintf("DEFAULT %s", dflt);
				}
				if (dflt!="NOT NULL") {
					if (dflt!=null) {
						query+=sprintf(" ");
					}
					query+=sprintf("%s", notnull);
				}
			}
			if (primarykey!=null) {
				query+=sprintf(",\r\n\tPRIMARY KEY(%s)", primarykey);
			}
			query+=sprintf("\r\n)\r\n");
			if (this.options.sqltype=="FBSQL") {
				if (sequencename!=null) {
					r=sql.update(sprintf("DROP TRIGGER %s_bi;", tablename));
					r=sql.update(sprintf("DROP GENERATOR gen_%s;", tablename));
				}
				r=sql.update(sprintf("DROP TABLE %s;", tablename));
			} else if (this.options.sqltype=="MYSQL") {
				r=sql.update(sprintf("DROP TABLE IF EXISTS %s;", tablename));
				//if (this.checksqlerror(r)) return false;
			} else if (this.options.sqltype=="ODBC") {
			} else if (this.options.sqltype=="PGSQL") {
				r=sql.update(sprintf("DROP SEQUENCE %s;", sequencename));
				//if (this.checksqlerror(r)) return false;
				r=sql.update(sprintf("CREATE SEQUENCE %s start 1 increment 1 maxvalue 2147483647 minvalue 1 cache 1;", sequencename));
				//if (this.checksqlerror(r)) return false;
				r=sql.update(sprintf("DROP TABLE %s;", tablename));
				//if (this.checksqlerror(r)) return false;
			} else if (this.options.sqltype=="SQLITE") {
				r=sql.update(sprintf("DROP TABLE IF EXISTS %s;", tablename));
				//if (this.checksqlerror(r)) return false;
			}
			r=sql.update(query);
			if (this.checksqlerror(r)) return false;
			if (this.options.sqltype=="FBSQL") {
				/* create generators and triggers for this table */
				if (sequencename!=null) {
					r=sql.update(sprintf("CREATE GENERATOR gen_%s;", tablename));
					if (this.checksqlerror(r)) return false;
					r=sql.update(sprintf("SET GENERATOR gen_%s TO 0;", tablename));
					if (this.checksqlerror(r)) return false;
					r=sql.update(sprintf("CREATE TRIGGER %s_bi FOR %s\n"+
						"ACTIVE BEFORE INSERT POSITION 0\n"+
						"AS\n"+
						"BEGIN\n"+
						"IF (NEW.%s IS NULL OR NEW.%s=0) THEN NEW.%s = GEN_ID(gen_%s, 1);\n"+
						"END\n"
						, tablename, tablename, indexname, indexname, indexname, tablename
					));
					if (this.checksqlerror(r)) return false;
				}
			}
			return true;
		}

		function db_dump() {
			if (this.options.option=="") {
				print("missing filename\r\n");
				return false;
			}
			file.writeall(this.options.option, "");
			this.table_dump("gw_dbinfo", "dbversion");
			this.table_dump("gw_users", "userid");
			this.table_dump("gw_users_sessions", "sessionid");
			this.table_dump("gw_activity", "activityid");
			this.table_dump("gw_bookmarks", "bookmarkid");
			this.table_dump("gw_bookmarks_folders", "folderid");
			this.table_dump("gw_calls", "callid");
			this.table_dump("gw_calls_actions", "actionid");
			this.table_dump("gw_contacts", "contactid");
			this.table_dump("gw_contacts_folders", "folderid");
			this.table_dump("gw_contacts_sessions", "sessionid");
			this.table_dump("gw_domains", "domainid");
			this.table_dump("gw_domains_aliases", "domainaliasid");
			this.table_dump("gw_email_accounts", "mailaccountid");
			this.table_dump("gw_email_filters", "mailfilterid");
			this.table_dump("gw_email_folders", "accountid,mailfolderid");
			this.table_dump("gw_email_headers", "mailheaderid");
			this.table_dump("gw_events", "eventid");
			this.table_dump("gw_events_closings", "eventclosingid");
			this.table_dump("gw_events_types", "eventtypeid");
			this.table_dump("gw_files", "fileid");
			this.table_dump("gw_finance_accounts", "accountid");
			this.table_dump("gw_finance_inventory", "inventoryid");
			this.table_dump("gw_finance_invoices", "invoiceid");
			this.table_dump("gw_finance_invoices_items", "invoiceitemid");
			this.table_dump("gw_finance_journal", "entryid");
			this.table_dump("gw_forums", "forumid");
			this.table_dump("gw_forums_groups", "forumgroupid");
			this.table_dump("gw_forums_posts", "messageid");
			this.table_dump("gw_groups", "groupid");
			this.table_dump("gw_groups_members", "groupmemberid");
			this.table_dump("gw_locations_history", "locationhistoryid");
			this.table_dump("gw_messages", "messageid");
			this.table_dump("gw_notes", "noteid");
			this.table_dump("gw_projects", "projectid");
			this.table_dump("gw_queries", "queryid");
			this.table_dump("gw_smtp_aliases", "aliasid");
			this.table_dump("gw_smtp_relayrules", "relayruleid");
			this.table_dump("gw_tasks", "taskid");
			this.table_dump("gw_weblog_comments", "commentid");
			this.table_dump("gw_weblog_entries", "entryid");
			this.table_dump("gw_weblog_groups", "groupid");
			this.table_dump("gw_zones", "zoneid");
		}

		function table_dump(table, index) {
			if (table=="gw_dbinfo") {
				query=sprintf("SELECT * FROM %s ORDER BY %s;", table, index);
			} else {
				query=sprintf("SELECT * FROM %s ORDER BY obj_did,%s;", table, index);
			}
			r=sql.query(query);
			if (this.checksqlerror(r)) {
				printf("\r\nError dumping %s\r\n", table);
				return false;
			}
			foreach (row in r.rows) {
				first=true;
				names="";
				vals="";
				foreach (n,v in row) {
					if (table=="gw_contacts" || table=="gw_users") {
						if (n=="loginip" || n=="logintime" || n=="logintoken") continue;
					}
					if (!first) { names+=", "; vals+=", "; }
					first=false;
					names+=n;
					//s=sql.escape(v);
					s=v.replace("\\", "\\\\").replace("'", "''").replace("\r", "").replace("\n", "\\n");
					vals+=sprintf("'%s'", s);
				}
				query=sprintf("INSERT INTO %s (%s) VALUES (%s);\n", table, names, vals);
				file.append(this.options.option, query);
			}
			return true;
		}

		function db_restore_data() {
			//char line[32768];
			if (this.options.option=="") {
				print("missing filename\r\n");
				return false;
			}
			filedata=file.readall(this.options.option);
			if (filedata.length()==0) {
				printf("Could not open source file.\r\n");
				return false;
			}
			lines=filedata.split("\n");
			printf("Restoring data (%d lines)...\r\n", lines.length());
			io.flush();
			//while (fgets(line, sizeof(line) - 1, fp) != NULL) {
			foreach (line in lines) {
				line=line.trim();
				// while ((line[strlen(line) - 1] == '\n') || (line[strlen(line) - 1] == '\r')) {
				// 	line[strlen(line) - 1] = '\0';
				// }
				if (line.sub(0, 6)=="INSERT") {
					// pTemp = line;
					// while (*pTemp) {
					// 	if ((pTemp[0] == '\\') && (pTemp[1] == '\\')) {
					// 		pTemp += 2;
					// 		continue;
					// 	}
					// 	if ((pTemp[0] == '\\') && (pTemp[1] == 'n')) {
					// 		pTemp[0] = 13;
					// 		pTemp[1] = 10;
					// 	}
					// 	pTemp++;
					// }
					line=line.replace("\\n", "\r\n");
					r=sql.update(line);
					if (this.checksqlerror(r)) return false;
				}
			}
			//this.sequence_sync(N);
			//fclose(fp);
			//this.table_check(N);
			printf("db_restore() done.\r\n");
			return true;
		}

		function sequence_sync() {
			if (this.options.sqltype=="FBSQL") {
				//printf("fbsql_generator_sync started;\r\n");
				foreach (table_schema in db.schema) {
					if (typeof(table_schema)!='table') continue;
					if (table_schema.sequencename==null) continue;
					r=sql.query(sprintf("SELECT MAX(%s) AS m FROM %s", table_schema.index, table_schema.name));
					if (this.checksqlerror(r)) return false;
					if (r.rows.length() != 1) {
						printf("sql error? 'SELECT MAX(%s) FROM %s'", table_schema.index, table_schema.name);
						max = 0;
					} else {
						max = tonumber(r.rows[0].m);
					}
					r=sql.update(sprintf("SET GENERATOR gen_%s TO %d;", table_schema.name, max));
					if (this.checksqlerror(r)) return false;
				}
				//printf("fbsql_generator_sync done;\r\n");
			} else if (this.options.sqltype=="PGSQL") {
				//for (i=0;;i++) {
				//	if (pgsqldb_tables[i].seqname==NULL) break;
				//	if (_sql_queryf(N, &qobj, "SELECT max(%s) FROM %s", pgsqldb_tables[i].index, pgsqldb_tables[i].name)<0) return false;
				//	if (sql_numtuples(N, &qobj)!=1) {
				//		_sql_freeresult(N, &qobj);
				//		return false;
				//	}
				//	max=atoi(sql_getvalue(N, &qobj, 0, 0))+1;
				//	_sql_freeresult(N, &qobj);
				//	if (_sql_queryf(N, &qobj, "SELECT last_value FROM %s", pgsqldb_tables[i].seqname)<0) return false;
				//	if (sql_numtuples(N, &qobj)!=1) {
				//		_sql_freeresult(N, &qobj);
				//		return false;
				//	}
				//	seq=atoi(sql_getvalue(N, &qobj, 0, 0));
				//	_sql_freeresult(N, &qobj);
				//	if (seq<max) seq=max;
				//	if (_sql_queryf(N, &qobj, "SELECT setval ('\"%s\"', %d, false);", pgsqldb_tables[i].seqname, seq)<0) return false;
				//	if (sql_numtuples(N, &qobj)!=1) {
				//		_sql_freeresult(N, &qobj);
				//		return false;
				//	}
				//	_sql_freeresult(N, &qobj);
				//}
			}
			return true;
		}

		function table_check() {
			print("table_check() is broken\r\n");
			return true;
			obj_t *qobj = NULL;
			//int i;
			int x;

			/* CHECK gw_dbinfo TABLE */
			if (_sql_query(N, &qobj, "SELECT count(*) FROM gw_dbinfo") < 0) return false;
			x = atoi(sql_getvalue(N, &qobj, 0, 0));
			_sql_freeresult(N, &qobj);
			if (x == 0) {
			//	for (i=0;sqldata_new[i]!=NULL;i++) {
			//		if (_sql_update(N, sqldata_new[i])<0) { printf("\r\nError inserting '%s'\r\n", sqldata_new[i]); return false; }
			//	}
			}
			/* CHECK gw_calls_actions TABLE */
			if (_sql_query(N, &qobj, "SELECT count(*) FROM gw_calls_actions") < 0) return false;
			x = atoi(sql_getvalue(N, &qobj, 0, 0));
			_sql_freeresult(N, &qobj);
			if (x == 0) {
			//	for (i=0;sqldata_callactions[i]!=NULL;i++) {
			//		if (_sql_update(N, sqldata_callactions[i])<0) { printf("\r\nError inserting '%s'\r\n", sqldata_callactions[i]); return false; }
			//	}
			}
			/* CHECK gw_domains TABLE */
			if (_sql_query(N, &qobj, "SELECT count(*) FROM gw_domains") < 0) return false;
			x = atoi(sql_getvalue(N, &qobj, 0, 0));
			_sql_freeresult(N, &qobj);
			if (x == 0) {
			//	for (i=0;sqldata_domains[i]!=NULL;i++) {
			//		if (_sql_update(N, sqldata_domains[i])<0) { printf("\r\nError inserting '%s'\r\n", sqldata_domains[i]); return false; }
			//	}
			}
			/* CHECK gw_eventclosings TABLE */
			if (_sql_query(N, &qobj, "SELECT count(*) FROM gw_events_closings") < 0) return false;
			x = atoi(sql_getvalue(N, &qobj, 0, 0));
			_sql_freeresult(N, &qobj);
			if (x == 0) {
			//	for (i=0;sqldata_eventclosings[i]!=NULL;i++) {
			//		if (_sql_update(N, sqldata_eventclosings[i])<0) { printf("\r\nError inserting '%s'\r\n", sqldata_eventclosings[i]); return false; }
			//	}
			}
			/* CHECK gw_eventtypes TABLE */
			if (_sql_query(N, &qobj, "SELECT count(*) FROM gw_events_types") < 0) return false;
			x = atoi(sql_getvalue(N, &qobj, 0, 0));
			_sql_freeresult(N, &qobj);
			if (x == 0) {
			//	for (i=0;sqldata_eventtypes[i]!=NULL;i++) {
			//		if (_sql_update(N, sqldata_eventtypes[i])<0) { printf("\r\nError inserting '%s'\r\n", sqldata_eventtypes[i]); return false; }
			//	}
			}
			/* Assign all orphaned records to domain 1 */
			//_sql_updatef(N, "UPDATE gw_users SET obj_did = 1, domainid = 1 WHERE domainid = 0");
			//_sql_updatef(N, "UPDATE gw_groups SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_contacts SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_activity SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_bookmarks SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_bookmarks_folders SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_calls SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_email_accounts SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_email_folders SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_email_headers SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_events SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_files SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_finance_invoices SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_notes SET obj_did = 1 WHERE obj_did = 0");
			//_sql_updatef(N, "UPDATE gw_tasks SET obj_did = 1 WHERE obj_did = 0");
			/* Update the db version */
			_sql_updatef(N, &qobj, "UPDATE gw_dbinfo SET dbversion = '%s'", PACKAGE_VERSION);
			_sql_freeresult(N, &qobj);
			return true;
		}

		function checksqlerror(r) {
			if (r==null || r.length()==0) {
				printf("r=[%s] %d\r\n", serialize(r), r.length());
				printf("unknown sql error - sql result is null or empty\r\n");
				io.flush();
				return true;
			}
			if (r.error==null) return false;
			printf("\r\nSQL Error: %s\r\n%s\r\n", r.error, serialize(r));
			io.flush();
			return true;
		}
	}
}
