include_template("common.ns");

namespace mail {
	class messagereader {
		function messagereader(messageid, folderid) {
			local function pad(s, p) {
				s='0'*p+s.tostring();
				return string.sub(s, string.len(s)-p, p);
			}
			var_domains_path=MASTERGLOBAL['CONFIG']['paths']['var_domains'];
			accountid = tonumber(_USER['pref']['mailcurrent']);
			domainid  = tonumber(_USER['domainid']);
			userid    = tonumber(_USER['userid']);
			this.body_found=false;
			this.messageid = messageid;
			if (messageid==0) return false;
			this.filename=sprintf("%s/%s/mail/%s/%s/%s.msg", var_domains_path, pad(domainid, 4), pad(accountid, 4), pad(folderid, 4), pad(messageid, 6));
			//printf("loading %d %s %s<br>", this.messageid, this.filename, serialize(file.stat(this.filename)));
			this.msgbody=file.readall(this.filename);
			if (typeof(this.msgbody)!='string') {
				//printf("cannot read file '%s'", this.filename);
				this.msgbody="";
				return false;
			}
			this.message=net.mime.read(this.msgbody);
		}
		function getbody() {
			local function findtextorhtml(parent) {
				local function message_decode(body, header) {
					if (header['content-transfer-encoding']=='quoted-printable') {
						body=""+net.mime.qp.decode(body)+"";
					} else if (header['content-transfer-encoding']=='base64') {
						body=""+net.mime.base64.decode(body)+"";
					}
					return body;
				}
				foreach (n,v in parent['body']) {
					ctype=v['head']['content-type']!=null?v['head']['content-type']:"";
					if (string.istr(ctype, 'text/html')==null) continue;
					messagebody=this.message_decode(v['body'], v['head']);
					return messagebody;
				}
				foreach (n,v in parent['body']) {
					ctype=v['head']['content-type']!=null?v['head']['content-type']:"";
					if (string.istr(ctype, 'text/plain')==null) continue;
					messagebody=this.message_decode(v['body'], v['head']);
					messagebody=string.replace(strtohtml(messagebody), "\n", "\n<BR>");
					return messagebody;
				}
				return null;
			}
			local function message_decode(body, header) {
				if (header['content-transfer-encoding']=='quoted-printable') {
					body=""+net.mime.qp.decode(body)+"";
				} else if (header['content-transfer-encoding']=='base64') {
					body=""+net.mime.base64.decode(body)+"";
				}
				return body;
			}
			local function pad(s, p) {
				s='0'*p+s.tostring();
				return string.sub(s, string.len(s)-p, p);
			}
			if (typeof(this.message['body'])=='string') {
				messagebody=message_decode(this.message['body'], this.message['head']);
				ctype=this.message['head']['content-type']!=null?this.message['head']['content-type']:"";
				if (string.istr(ctype, 'text/html')==null) {
					messagebody=string.replace(strtohtml(messagebody), "\n", "\n<BR>");
				}
				this.body_found=true;
			}
			if (!this.body_found && this.message.len()>0) {
				res=findtextorhtml(this.message);
				if (res!=null) {
					messagebody=res;
					this.body_found=true;
				} else {
					/* it might be in an alternative part */
					foreach (n,v in this.message['body']) {
						ctype=v['head']['content-type']!=null?v['head']['content-type']:"";
						if (string.istr(ctype, 'multipart/alternative')==null && string.istr(ctype, 'multipart/related')==null) continue;
						//subbody=this.message_decode(v['body'], v['head']);
						//return messagebody;
						res=findtextorhtml(v);
						if (res!=null) {
							messagebody=res;
							this.body_found=true;
						}
					}
				}
			}
			if (!this.body_found) {
				messagebody="";
			}
			return messagebody;
		}
		function search(searchtext) {
			local function getheader(x) {
				if (typeof(x)=='string') return net.mime.rfc2047.decode(x);
				return "";
			}
			if (searchtext=="") return false;
			found=false;
			var from    = getheader(this.message['head']['from']);
			var to      = getheader(this.message['head']['to']);
			var subject = getheader(this.message['head']['subject']);
			if (from.tolower().contains(searchtext)) found=true;
			else if (to.tolower().contains(searchtext)) found=true;
			else if (subject.tolower().contains(searchtext)) found=true;
			else {
				// this function should be done in c - too slow in script
				local function fromhtml(bodytext) {
					if (typeof(bodytext)!='string') return bodytext;
					y=bodytext.split('');
					len=y.length();
					for (i=0;i<len;i++) {
						if (y[i]!='<') continue;
						for (j=i;j<len;j++) {
							c=y[j];
							y[j]='';
							if (c=='>') break;
						}
						i=j;
					}
					bodytext=y.join();
					return bodytext;
				}
				bodytext=fromhtml(this.getbody());
				if (typeof(bodytext)!='string') {
					//printf("[%s]<hr>", serialize(this.message));
					return false;
				}
				if (bodytext.tolower().contains(searchtext)) {
					//printf("[%s]<hr>", strtohtml(bodytext));
					found=true;
				}
			}
			//this.message="";
			//msgbody="";
			return found;
		}
	};
	function getaddr(x) {
		x0=net.mime.rfc2047.decode(x);
		if (typeof(x0)!='string') return { name=x, addr=x, full=x };
		if ((x1=x0.str("<"))==null) return { name=x0, addr=x0, full=x0 };
		if ((x2=x1.str(">"))==null) return { name=x0, addr=x0, full=x0 };
		name=x0.replace(x1, "");
		addr=x1.sub(1, x1.len()-x2.len()-1);
		while (name.sub(-1, 1)==" ") name=name.sub(0, name.len()-1);
		if (name.sub(0, 1)=="\"" && name.sub(-1, 1)=="\"") name=name.sub(1, name.len()-2);
		if (name=="") name=addr;
		return { name=name, addr=addr, full=x0 };
	}
	function load_header_from_sql(mailheaderid, uidl) {
		var userid   = tonumber(mailheaderid);
		var userid   = tonumber(_USER['userid']);
		var domainid = tonumber(_USER['domainid']);

		if (userid==0 || domainid==0) return null;
		query=sprintf("SELECT * FROM gw_email_headers WHERE obj_uid = %d AND obj_did = %d", userid, domainid);
		if (mailheaderid!=null) query+=sprintf(" AND mailheaderid = %d", mailheaderid);
		if (uidl!=null) query+=sprintf(" AND uidl = '%s'", sql_escape(uidl));
		query+=";";
		sqr=sql.query(query);
		if (sqr.rows.length()==1) return sqr.rows[0];
		return null;
	}
	function save_header_to_sql(accountrow, message, uidl, size) {
		local function getheader(x) {
			if (typeof(x)=='string') return net.mime.rfc2047.decode(x);
			return "";
		}
		var userid      = tonumber(_USER['userid']);
		var accountid   = tonumber(accountrow['mailaccountid']);
		var domainid    = tonumber(_USER['domainid']);
		var from        = getheader(message['head']['from']);
		var to          = getheader(message['head']['to']);
		a=mail.getaddr(getheader(message['head']['reply-to']));
		var replyto     = a.addr;
		if (replyto=="") {
			a=mail.getaddr(from);
			replyto=a.addr;
		}
		var subject     = getheader(message['head']['subject']);

		// { "hdr_subject",    "varchar(200)",    "NOT NULL", "''"                };
                if (subject.length()>200) subject=subject.sub(0, 200);

		var boundary    = getheader(message['boundary']);
		var dt          = tonumber(message['headvalues']['date_numeric']);
		var messageid   = getheader(message['head']['message-id']);
		var inreplyto   = getheader(message['head']['in-reply-to']);
		var contenttype = getheader(message['head']['content-type']);
		var encoding    = getheader(message['head']['content-transfer-encoding']);
		c = new sqlcommand("INSERT INTO gw_email_headers (mailheaderid,obj_uid,obj_gid,obj_did,obj_gperm,obj_operm,accountid,folder,status,size,uidl,hdr_from,"+
			"hdr_replyto,hdr_to,hdr_cc,hdr_bcc,hdr_subject,hdr_date,hdr_messageid,hdr_inreplyto,hdr_contenttype,hdr_boundary,hdr_encoding,hdr_scanresult)"+
			" VALUES (?,?,0,?,0,0,?,?,'n',?,?,?,?,?,'','',?,?,?,?,?,?,?,'');");
		c.addvalue('mailheaderid', 0);
		c.addvalue('obj_uid', userid);
		c.addvalue('obj_did', domainid);
		c.addvalue('accountid', accountid);
		c.addvalue('folder', 1);
		c.addvalue('size', size);
		c.addvalue('uidl', uidl);
		c.addvalue('hdr_from', from);
		c.addvalue('hdr_replyto', replyto);
		c.addvalue('hdr_to', to);
		c.addvalue('hdr_subject', subject);
		c.addvalue('hdr_date', time.sqltime(dt));
		c.addvalue('hdr_messageid', messageid);
		c.addvalue('hdr_inreplyto', inreplyto);
		c.addvalue('hdr_contenttype', contenttype);
		c.addvalue('hdr_boundary', boundary);
		c.addvalue('hdr_encoding', encoding);
		sqr=sql.update(c.tostring());
		if (sqr.lastinsertedid<1) throw "sqr.lastinsertedid is invalid";
		//message['mailheaderid']=sqr.lastinsertedid;
		return sqr.lastinsertedid;
	}
	function save_outbound() {
		local function strtohtml(s) {
			s=typeof(s)=='string'?s:"";
			return s.replace("&", "&amp;").replace("\"", "&quot;").replace("<", "&lt;");
		}
		local function pad(s, p) {
			s='0'*p+s.tostring();
			return string.sub(s, string.len(s)-p, p);
		}
		//file.writeall(sprintf("%s/%d.raw", MASTERGLOBAL['CONFIG']['paths']['var_tmp'], time.now()), POSTRAWDATA);
		dim = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
		miy = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
		var userid   = tonumber(_USER['userid']);
		var domainid = tonumber(_USER['domainid']);
		var accountid = tonumber(_POST['MSGFROM']);

		sqr=sql.query(sprintf("SELECT * FROM gw_email_accounts WHERE obj_uid = %d AND mailaccountid = %d;", userid, accountid));
		if (sqr.rows.length()!=1) throw "account not found";
		account=sqr.rows[0];
		//var accountid = tonumber(_USER['pref']['mailcurrent']);
		//var accountid = tonumber(_USER['prefmailcurrent']);
		var var_domains_path=MASTERGLOBAL['CONFIG']['paths']['var_domains'];
		var outfolderid = 2;
		if (_POST['FOLDER']=='draft') outfolderid = 5;
		//folder
		var tmpdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(domainid, 4), pad(accountid, 4), pad(outfolderid, 4));
		if (typeof(file.stat(tmpdirname))!='table') file.mkdir(tmpdirname);
		from=sprintf("\"%s\" <%s>", account['realname'], account['address']);
		to=_POST['MSGTO'];
		cc=_POST['MSGCC'];
		bcc=_POST['MSGBCC'];
		subject=_POST['MSGSUBJECT'];
		body=_POST['MSGBODY'];
		organization=account['organization'];
		replyto=account['replyto'];
		inreplyto=_POST['INREPLYTO'];
		msgbody="";
		msgbody+=sprintf("From: %s\r\n", from);
		if (replyto!="") msgbody+=sprintf("Reply-To: %s\r\n", replyto);
		if (organization!="") msgbody+=sprintf("Organization: %s\r\n", organization);
		msgbody+=sprintf("To: %s\r\n", to);
		if (cc!="") msgbody+=sprintf("Cc: %s\r\n", cc);
		msgbody+=sprintf("Subject: %s\r\n", net.mime.rfc2047.encode(subject));
		t=time.gmtime();
		msgdate=sprintf("%s, %d %s %d %s:%s:%s +0000", dim[t.tm_wday], t.tm_mday, miy[t.tm_mon-1], t.tm_year, pad(t.tm_hour, 2), pad(t.tm_min, 2), pad(t.tm_sec, 2));
		msgbody+=sprintf("Date: %s\r\n", msgdate);
		messageid=time.sqltime().replace('-', '').replace(':', '').replace(' ', '');
		msgbody+=sprintf("Message-ID: %s\r\n", messageid);
		if (inreplyto!="") msgbody+=sprintf("In-Reply-To: %s\r\n", inreplyto);
		msgbody+=sprintf("MIME-Version: 1.0\r\n");
//		if ((filesize>0)||(forward>0)) {
//			fprintf(fp, "Content-Type: multipart/mixed; boundary=\"%s\"\r\n", boundary);
//		} else {
//			fprintf(fp, "Content-Type: %s; charset=%s\r\n", header.contenttype, "utf-8");
//		}
		attachments=false;
		foreach (v in _POST) {
			if (v.gettype()=='table') attachments=true;
		}
		if (attachments) {
			boundary = sprintf("MIME_BOUNDARY_%s_0001", messageid);
			msgbody+=sprintf("Content-Type: multipart/mixed; boundary=\"%s\"\r\n", boundary);
		} else {
			msgbody+=sprintf("Content-Type: %s; charset=%s\r\n", "text/html", "utf-8");
			msgbody+=sprintf("Content-Transfer-Encoding: quoted-printable\r\n");
		}
		msgbody+=sprintf("X-Mailer: %s %s\r\n", "NullLogic GroupServer", "X");
		msgbody+=sprintf("\r\n");
		if (attachments) {
			msgbody+=sprintf("This is a multi-part message in MIME format.\r\n");
			msgbody+=sprintf("\r\n--%s\r\n", boundary);
			msgbody+=sprintf("Content-Type: %s; charset=%s\r\n", "text/html", "utf-8");
			msgbody+=sprintf("Content-Transfer-Encoding: quoted-printable\r\n\r\n");
			msgbody+=net.mime.qp.encode(body, 76);
			foreach (v in _POST) {
				if (v.gettype()!='table') continue;
				msgbody+=sprintf("\r\n--%s\r\n", boundary);
				msgbody+=sprintf("Content-Type: application/octet-stream; name=\"%s\"\r\n", v['FILENAME']);
				msgbody+=sprintf("Content-Transfer-Encoding: base64\r\n");
				msgbody+=sprintf("Content-Disposition: attachment; filename=\"%s\"\r\n\r\n", v['FILENAME']);
				msgbody+=net.mime.base64.encode(v['DATA'], 76);
			}
			msgbody+=sprintf("\r\n--%s--\r\n", boundary);
		} else {
			msgbody+=net.mime.qp.encode(body, 76);
			msgbody+=sprintf("\r\n");
		}
		message=net.mime.read(msgbody);
		uidl='x';
		accountrow = { mailaccountid=accountid };
		newemailid=mail.save_header_to_sql(accountrow, message, string.replace(net.mime.base64.encode(uidl), '=', ''), sizeof(msgbody));
		sql.update(sprintf("UPDATE gw_email_headers SET folder = %d WHERE mailheaderid = %d;", outfolderid, newemailid));
		//newemailid=sqlgetsequence("gw_email_headers");
		// if (newemailid<1) {
		// 	printf("newemailid<1 '%d' ??", newemailid);
		// 	return;
		// }
		filename=sprintf("%s.msg", pad(newemailid, 6));
		if (typeof(file.stat(tmpdirname+"/"+filename))!='table') {
			file.writeall(tmpdirname+"/"+filename, msgbody);
		}
		print("success");
	}
}

namespace mail.sync {
	function dir_sync(row) {
		var userid = tonumber(_USER['userid']);
		local function pad(s, p) {
			s='0'*p+s.tostring();
			return s.sub(s.len()-p, p);
		}
		var var_domains_path=MASTERGLOBAL['CONFIG']['paths']['var_domains'];
		var tmpdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(0, 4));
		var dstdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(1, 4));
		if (typeof(file.stat(tmpdirname))!='table') {
			file.mkdir(tmpdirname);
			if (typeof(file.stat(tmpdirname))!='table') {
				printf("%s doesn't exist!", tmpdirname);
			}
		}
		if (typeof(file.stat(dstdirname))!='table') {
			file.mkdir(dstdirname);
			if (typeof(file.stat(dstdirname))!='table') {
				printf("%s doesn't exist!", dstdirname);
			}
		}
		importdirname=tmpdirname+"/import";
		_d=dirlist(importdirname);
		foreach (f in _d) {
			if (f.type!="file") continue;
			if (string.sub(f.name, -5, 5)==".done") continue;
			print("file=<pre>",serialize(f),"</pre>");
			uidl="file:"+file.md5(srcname);
			msgbody=file.readall(srcname);
			message=net.mime.read(msgbody);
			newemailid=mail.save_header_to_sql(row, message, uidl, sizeof(msgbody));
			// newemailid=sqlgetsequence("gw_email_headers");
			// if (newemailid<1) {
			// 	printf("newemailid<1 '%d' ??", newemailid);
			// 	return;
			// }
			filename=sprintf("%s.msg", pad(newemailid, 6));
			printf("saving '%s' in '%s/'<br>", filename, tmpdirname);
			srcname=importdirname+"/"+f.name;
			if (typeof(file.md5)!='function') {
				print("file.md5() missing\n");
				break;
			}
			tmpname=tmpdirname+"/"+filename;
			dstname=dstdirname+"/"+filename;
			if (typeof(file.stat(tmpname))=='table') {
				printf("file %s already exists!", tmpname);
				break;
			}
			file.rename(srcname, tmpname);
			if (typeof(file.stat(tmpname))!='table') {
				printf("failed to write file %s!", tmpname);
				break;
			}
			// newemailid=mail.save_header_to_sql(row, message, uidl, sizeof(msgbody));
			print(".");
			io.flush();
			file.rename(tmpname, dstname);
		}
		return;
	}
	function pop3_sync(row, verbose) {
		local function pad(s, p) {
			s='0'*p+s.tostring();
			return string.sub(s, string.len(s)-p, p);
		}
		local function getheader(x) {
			if (typeof(x)=='string') return net.mime.rfc2047.decode(x);
			return "";
		}
		local function strtohtml(s) {
			s=typeof(s)=='string'?s:"";
			return s.replace("&", "&amp;").replace("\"", "&quot;").replace("<", "&lt;");
		}

		var notify=tonumber(row['notify']);

		if (notify==0) {
			return;
		}

		var userid = tonumber(_USER['userid']);
		var accountid=tonumber(row['mailaccountid']);
		var var_domains_path=MASTERGLOBAL['CONFIG']['paths']['var_domains'];
		var tmpdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(0, 4));
		var trashdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(4, 4));
		var newmail=0;
		var deleted=0;
		statustext="";
		sql.update(sprintf("UPDATE gw_email_accounts SET lastcheck = '%s' WHERE mailaccountid = %d;", time.sqltime(), accountid));
		pop=new net.pop3.client();
		pop.username = row['popusername'];
		pop.password = net.mime.base64.decode(row['poppassword']);
		pop.host     = row['pophost'];
		pop.port     = tonumber(row['popport']);
		pop.use_tls  = row['popssl']=="1"?true:false;
		if (verbose) printf("<b>%s</b><br>", row['accountname']);
		if (pop.open()!=true) {
			if (!verbose) printf("<b>%s</b><br>", row['accountname']);
			printf("ERROR: pop.open() \"%s\"", pop.last_err);
			return;
		}
		stat=pop.stat();
		count=stat.count;
		if (typeof(file.stat(tmpdirname))!='table') file.mkdir(tmpdirname);
		for (i=1;i<=count;i++) {
			uidl=pop.uidl(i);
			query=sprintf("SELECT * FROM gw_email_headers WHERE obj_uid = %d AND uidl = '%s';", userid, string.replace(net.mime.base64.encode(uidl), '=', ''));
			var sqr=sql.query(query);
			if (sizeof(sqr.rows)!=0) {
				hrow=sqr.rows[0];
				continue;
			} else {
				newmail++;
				//printf("<br>saving '%s' in '%s/'", filename, tmpdirname);
				msgbody=pop.retr(i);
				message=net.mime.read(msgbody);
				newemailid=mail.save_header_to_sql(row, message, string.replace(net.mime.base64.encode(uidl), '=', ''), sizeof(msgbody));

				// newemailid=sqlgetsequence("gw_email_headers");
				// if (newemailid<1) {
				// 	printf("newemailid<1 '%d' ??", newemailid);
				// 	return;
				// }
				filename=sprintf("%s.msg", pad(newemailid, 6));

				if (typeof(file.stat(tmpdirname+"/"+filename))!='table') {
					file.writeall(tmpdirname+"/"+filename, msgbody);
				}

				var dstdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(row['obj_did'], 4), pad(row['mailaccountid'], 4), pad(1, 4));
				if (typeof(file.stat(dstdirname))!='table') file.mkdir(dstdirname);
				file.rename(tmpdirname+"/"+filename, dstdirname+"/"+filename);

				var from    = getheader(message['head']['from']);
				var subject = getheader(message['head']['subject']);
				if (subject.length()>50) subject=subject.sub(0, 50)+"...";
				printf("<b>From:</b> %s<br>", strtohtml(from));
				printf("<b>Subject:</b> %s<br><br>", strtohtml(subject));
			}
		}

		if (typeof(file.stat(trashdirname))!='table') file.mkdir(trashdirname);
		uidls={};
		for (i=1;i<=count;i++) {
			uidl=pop.uidl(i);
			uidls[sizeof(uidls)] = { remoteindex=i; uidl=uidl; };
		}
		query=sprintf("SELECT * FROM gw_email_headers WHERE obj_uid = %d AND accountid = %d AND folder = 4 ORDER BY mailheaderid;", userid, accountid);
		sqr=sql.query(query);

		// delete local copies in trash if no remote copy is found
		foreach (header in sqr.rows) {
			//print("<hr><pre>header=",strtohtml(serialize(header)),"</pre><hr>");
			matchfound=false;
			matchedid=0;
			foreach (uidl in uidls) {
				x=net.mime.base64.encode(uidl.uidl).replace('=', '');
				if (header['uidl']!=x) continue;
				//printf("<font color=green>uidl=%s matches rowentry %s</font><br>", x, header['uidl']);
				matchfound=true;
				matchedid=uidl.remoteindex;
				break;
			}
			if (matchfound==false) {
				mailheaderid=tonumber(header['mailheaderid']);
				filename=sprintf("%s.msg", pad(mailheaderid, 6));
				if (typeof(file.stat(trashdirname+"/"+filename))=='table') {
					file.unlink(trashdirname+"/"+filename);
				}
				query=sprintf("DELETE FROM gw_email_headers WHERE obj_uid = %d AND accountid = %d AND folder = 4 AND mailheaderid = %d;", userid, accountid, mailheaderid);
				sql.update(query);
				deleted++;
			}
		}

		// delete remote copy if found in local trash, then delete local trash copy
		for (i=uidls.length();i>0;i--) {
			matchfound=false;
			matchedid=0;
			mailheaderid=0;
			uidl=uidls[i-1];
			foreach (header in sqr.rows) {
				x=net.mime.base64.encode(uidl.uidl).replace('=', '');
				if (header['uidl']!=x) continue;
				matchfound=true;
				matchedid=uidl.remoteindex;
				mailheaderid=tonumber(header['mailheaderid']);
				u=pop.uidl(matchedid);
				if (u!=uidl.uidl) break;
				pop.dele(matchedid);
				filename=sprintf("%s.msg", pad(mailheaderid, 6));
				if (typeof(file.stat(trashdirname+"/"+filename))=='table') {
					file.unlink(trashdirname+"/"+filename);
				}
				query=sprintf("DELETE FROM gw_email_headers WHERE obj_uid = %d AND accountid = %d AND folder = 4 AND mailheaderid = %d;", userid, accountid, mailheaderid);
				sql.update(query);
				deleted++;
				break;
			}
		}
		//print("<hr><pre>uidls=",strtohtml(serialize(uidls)),"</pre><hr>");
		pop.close();

		if (verbose) {
			printf("%d message%s", count, (count==1)?'':'s');
			printf(", %d new", newmail);
			printf(", %d deleted<br>", deleted);
		}
		return;
	}
	function smtp_sync(accountrow) {
		local function swrite(sock, text) {
			//print("<font color=blue>",strtohtml(text),"</font><br>");
			return sock.write(text);
		}
		local function sread(sock) {
			do {
				instr=sock.gets();
				if (typeof(instr)!='string') throw "sock.gets() input error";
				//print("<font color=red>",strtohtml(instr),"</font><br>");
			} while (instr.sub(3, 1)=='-');
			return instr;
		}
		local function pad(s, p) {
			s='0'*p+s.tostring();
			return string.sub(s, string.len(s)-p, p);
		}
		//print("<pre>account=", strtohtml(serialize(accountrow)), "</pre>");
		var accountid = tonumber(accountrow['mailaccountid']);
		var userid    = tonumber(_USER['userid']);
		var var_domains_path=MASTERGLOBAL['CONFIG']['paths']['var_domains'];
		var outdirname =sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(accountrow['obj_did'], 4), pad(accountid, 4), pad(2, 4));
		var sentdirname=sprintf("%s/%s/mail/%s/%s", var_domains_path, pad(accountrow['obj_did'], 4), pad(accountid, 4), pad(3, 4));
		if (typeof(file.stat(outdirname))!='table') file.mkdir(outdirname);
		if (typeof(file.stat(sentdirname))!='table') file.mkdir(sentdirname);

		query=sprintf("SELECT * FROM gw_email_headers WHERE obj_uid = %d AND accountid = %d AND folder = 2;", userid, accountid);
		sqr=sql.query(query);
		foreach (header in sqr.rows) {
			//print("<pre>accountrow = ", strtohtml(serialize(accountrow)), "</pre>");
			//print("<pre>header = ", strtohtml(serialize(header)), "</pre>");
			headerid=tonumber(header['mailheaderid']);
			filename=sprintf("%s.msg", pad(headerid, 6));
			msgbody=file.readall(outdirname+"/"+filename);
			//printf("[%s]", outdirname+"/"+filename);
			//print("f.stat=",serialize(file.stat(outdirname+"/"+filename)),"<br>");
			sock=new net.socket();
			sock.connect(accountrow['smtphost'], tonumber(accountrow['smtpport']), tonumber(accountrow['smtpssl'])?true:false);
			if (typeof(sock._socket)!='sock4') {
				printf("can't connect to smtp server '%s'<br>",accountrow['smtphost']);
				sock.close();
				//delete sock;
				return;
			}
			try {
				rc=sread(sock);
				if (rc.sub(0, 3)!='220') throw "expected status '220', got '"+rc.sub(0, 3)+"'";
				swrite(sock, "HELO localhost\r\n");
				rc=sread(sock);
				if (rc.sub(0, 3)!='250') throw "expected status '250', got '"+rc.sub(0, 3)+"'";
				if (accountrow.smtpauth=='y') {
					swrite(sock, sprintf("AUTH PLAIN %s\r\n", net.mime.base64.encode(accountrow.popusername+'\0'+accountrow.popusername+'\0'+net.mime.base64.decode(accountrow.poppassword))));
					rc=sread(sock);
				//	if (strncasecmp(inbuffer, "502", 3)==0) return 0;
				//	if (strncasecmp(inbuffer, "235", 3)!=0) return -1;
				}
				swrite(sock, "MAIL From: <"+accountrow.address+">\r\n");
				rc=sread(sock);
				if (rc.sub(0, 3)!='250') throw "expected status '250', got '"+rc.sub(0, 3)+"'";
				foreach (rcptgroup in { header['hdr_to'], header['hdr_cc'], header['hdr_bcc'] } ) {
					foreach (rcpt in rcptgroup.split(',')) {
						a=mail.getaddr(rcpt);
						swrite(sock, "RCPT To: <"+a.addr+">\r\n");
						rc=sread(sock);
						if (rc.sub(0, 3)!='250') throw "expected status '250', got '"+rc.sub(0, 2)+"'";
					}
				}
				swrite(sock, "DATA\r\n");
				rc=sread(sock);
				if (rc.sub(0, 3)!='354') throw "expected status '354', got '"+rc.sub(0, 3)+"'";
				//print("<font color=blue>sending data...</font><br>");
				foreach (line in msgbody.split('\r\n')) {
					swrite(sock, line+'\r\n');
				}
				swrite(sock, ".\r\n");
				rc=sread(sock);
				if (rc.sub(0, 3)!='250') throw "expected status '250', got '"+rc.sub(0, 3)+"'";
				sql.update(sprintf("UPDATE gw_email_headers SET folder = 3 WHERE mailheaderid = %d;", headerid));
				file.rename(outdirname+"/"+filename, sentdirname+"/"+filename);
				printf("message sent - '%s'", filename);
			} catch (ex) {
				printf("Exception: [%s]", ex.description);
			} 
			swrite(sock, "QUIT\r\n");
			sread(sock);
			if (typeof(sock._socket)=='sock4') sock.close();
			delete sock;
		}
		return;
	}
	function dosync(accountrow, verbose) {
		if (accountrow['hosttype']=="POP3") {
			dir_sync(accountrow);
			pop3_sync(accountrow, verbose);
		} else {
			printf("<br>Unknown Host Type '%s'", accountrow['hosttype']);
		}
	}
	function dopurge(accountrow) {
		if (accountrow['hosttype']=="POP3") {
			pop3_purge(accountrow);
			//printf("don't know how to purge yet...");
			//dir_sync(accountrow);
		} else {
			printf("<br>Unknown Host Type '%s'", accountrow['hosttype']);
		}
	}
}

namespace mail.html {
	function headermenu () {
		var menuitems = {
			{ text="LIST";     cls='main'; href="/app/mail/list";          };
			{ text="COMPOSE";              href="/app/mail/compose"; onclick="return ns.mail.compose(0);"; };
			{ text="SYNC";     cls='main'; href="/app/mail/sync";          };
			{ text="ACCOUNTS"; cls='main'; href="/app/mail/accounts/list"; };
		};
		html.headersubmenu(menuitems);
	}
	function show_searchform() {
		// print("<form id=mailsearch name=mailsearch method=post action=\"/app/mail/list\" onsubmit=\"return ns.dialog.submit(event, 'mailsearch', 'save');\" enctype='multipart/form-data'>");
		// print("<input type=text name=searchtext value=\"\" placeholder='Search Mail' required='required' autocorrect='off'>");
		// //print("<input type=submit class=frmbutton name=search value='search'>\r\n");
		// print("</form>");
		print("<form id=mailsearch name=mailsearch method=post action=\"/app/mail/list\" onsubmit=\"return ns.mail.search();\" enctype='multipart/form-data'>");
		print("<input type=text name=searchtext value=\"\" placeholder='Search Mail' required='required' autocorrect='off'>");
		print("</form>");
	}
	function mailjump(accountid, folderid) {
		local function add_folders(add_folders, accountid, folderid, sqr, account, parent, depth) {
			foreach (fldrow in sqr.rows) {
				folder=tonumber(fldrow['mailfolderid']);
				if (parent!=tonumber(fldrow['parentfolderid'])) continue;
				printf("<option value=\"accountid=%d&folderid=%d\">%s%s", account, folder, "&nbsp;"*depth*4, strtohtml(fldrow['foldername']));
				if (account==accountid && folder==folderid) printf(" - (Current)");
				printf("</option>\r\n");
				add_folders(add_folders, accountid, folderid, sqr, account, folder, depth+1);
			}
		}
		var menustyle = tonumber(_USER['pref']['menustyle']);
		var userid    = tonumber(_USER['userid']);
		//if (!(auth_priv(sid, "email")&A_READ)) return;
		sqr1=sql.query(sprintf("SELECT mailaccountid, accountname FROM gw_email_accounts WHERE obj_uid = %d ORDER BY accountname ASC;", userid));
		//print("sqr1:",serialize(sqr1));
		if (sqr1.rows.length()==0) return;

		printf("<SCRIPT LANGUAGE=\"javascript\">\r\n");
		printf("function ChangeMail() {\r\n");
		//printf("	%slocation.replace('%s/mail/%s?'+document.mailjump.accountid.options[document.mailjump.accountid.selectedIndex].value);\r\n", menustyle>0?"top.gwmain.":"", _SERVER['SCRIPT_NAME'], menustyle>0?"main":"list");
		printf("	ns.GoTo('/app/mail/list?'+document.changemail.accountid.options[document.changemail.accountid.selectedIndex].value);\r\n");
		printf("}\r\n");
		printf("</SCRIPT>\r\n");

		printf("<form method=get name=changemail>\r\n", _SERVER['SCRIPT_NAME']);
		printf("<select id=accountid style=\"width:250px\" onChange=\"ChangeMail()\">\r\n");

		foreach (acctrow in sqr1.rows) {
			account=tonumber(acctrow['mailaccountid']);
			printf("<option value=\"accountid=%d&folderid=1\"", account);
			if (account==accountid) printf(" selected class=selBold");
			printf(">[ %s ]", strtohtml(acctrow['accountname']));
			if (account==accountid) {
				query=sprintf("SELECT mailfolderid, parentfolderid, foldername FROM gw_email_folders WHERE obj_uid = %d AND accountid = %d ORDER BY parentfolderid ASC, mailfolderid ASC;", userid, account);
				sqr2=sql.query(query);
				if (sqr2.rows.length()==0) continue;
				foreach (row in sqr2.rows) {
					if (tonumber(row['mailfolderid'])==folderid) {
						printf(" - %s", strtohtml(row['foldername']));
						break;
					}
				}
				printf("</option>\r\n");
				query=sprintf("SELECT mailfolderid, parentfolderid, foldername FROM gw_email_folders WHERE obj_uid = %d AND accountid = %d AND mailfolderid < 10 ORDER BY parentfolderid ASC, mailfolderid ASC;", userid, account);
				sqr2=sql.query(query);
				query=sprintf("SELECT mailfolderid, parentfolderid, foldername FROM gw_email_folders WHERE obj_uid = %d AND accountid = %d AND mailfolderid > 9 ORDER BY parentfolderid ASC, foldername ASC;", userid, account);
				sqr3=sql.query(query);

				// merge the two queries, preserving the returned order
				foreach (row in sqr3.rows) {
					sqr2.rows[sqr2.rows.length()]=row;
				}

				add_folders(add_folders, accountid, folderid, sqr2, account, 0, 1);

				//if (sqr2.rows.length()>0) printf("<option value=\"\">%s--</option>\r\n", "&nbsp;"*8);

				//add_folders(add_folders, accountid, folderid, sqr2, account, 0, 1);
			} else {
				printf("</option>\r\n");
			}
		}
		printf("</select>\r\n");
		printf("</form>\r\n");
		return;
	}
}
