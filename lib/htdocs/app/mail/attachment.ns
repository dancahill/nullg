
function send_file() {
	var userid   = tonumber(_USER['userid']);
	var headerid = tonumber(_GET['ID']);
	Q=db.mailheaders.get(headerid);
	row=Q.rows[0];
	if (Q==null || row==null) {
		printf("<br><b>could not find mail header for id %d</b>\r\n", headerid);
		return;
	}
	message=new mail.messagereader(headerid, row['folder']);
	body=message.getbody();
	if (!message.body_found) {
		throw "message is not parseable!!!";
	}
	foreach (x in message.message.body) {
		ctype=x.head["content-type"]?x.head["content-type"].tostring().tolower():"";
		cdisp=x.head["content-disposition"]?x.head["content-disposition"].tostring().tolower():"";
		encoding=x.head["content-transfer-encoding"]?x.head["content-transfer-encoding"]:"";
		encoding=encoding.tolower();
		fname=x.headvalues["filename"]?x.headvalues["filename"]:x.headvalues["name"]?x.headvalues["name"]:"";
		if (fname==_GET["FILENAME"]) {
			_HEADER["Content-Disposition"]=sprintf("attachment; filename=\"%s\"", fname);
			if (encoding.contains("base64")) {
				io.write(net.mime.base64.decode(x.body));
			} else if (encoding.contains("quoted-printable")) {
				io.write(net.mime.qp.decode(x.body));
			} else {
				io.write(x.body);
			}
			return;
		}
	}
	_HEADER["Content-Type"]=sprintf("text/plain");
	printf("attachment not found?");
	printf(serialize(x));
}

try {
	include("mail.lib.ns");
	send_file();
} catch (ex) {
	printf("<b>Exception: %s</b>", ex.description);
}
