
function print_header() {
	var userid   = tonumber(_USER['userid']);
	var headerid = tonumber(_GET['ID']);
	//var currentaccountid = tonumber(_USER['pref']['mailcurrent']);
	Q=db.mailheaders.get(headerid);
	row=Q.rows[0];
	if (Q==null || row==null) {
		printf("<br><b>could not find mail header for id %d</b>\r\n", headerid);
		return;
	}
	message=new mail.messagereader(headerid, row['folder']);
	if (_GET['PART']=='header') {
		print("<table id='msgread' class='contentview' style='height:100%;width:100%;'>\r\n");
		print("<tr><th style='text-align:left'>From</th><td>&nbsp;",strtohtml(row['hdr_from']),"</td></tr>\r\n");
		print("<tr><th style='text-align:left'>To</th><td>&nbsp;",strtohtml(row['hdr_to']),"</td></tr>\r\n");
		print("<tr><th style='text-align:left'>Subject</th><td width=\"100%\">&nbsp;",strtohtml(row['hdr_subject']),"</td></tr>\r\n");
		print("<tr><th style='text-align:left'>Date</th><td>&nbsp;",strtohtml(row['hdr_date']),"</td></tr>\r\n");
//		print("<tr><td colspan=2>[<a href=\"viewraw?msg=",msg,"\" target=\"_BLANK\">View Source</a>]</td></tr>\r\n");
		printf("<tr><td colspan=2>");
		printf("<button type=button class=frmButton onclick='ns.mail.compose(%d);'><a>reply</a></button>", headerid);
		printf("<button type=button class=frmButton onclick='ns.mail.delete(%d);'><a>delete</a></button>\r\n", headerid);
		printf("</td></tr>\r\n");
		print("<tr><td colspan=2 height=100%><iframe id='contentiframe' width=100% height=100% srcdoc=\"<p>Loading...</p>\" sandbox=\"allow-same-origin\" frameborder=\"0\"></iframe></td></tr>\r\n");

		if (message.message.body.gettype()=='table') {
			filelist={};
			foreach (x in message.message.body) {
				ctype=x.head["content-type"]?x.head["content-type"].tostring().tolower():"";
				cdisp=x.head["content-disposition"]?x.head["content-disposition"].tostring().tolower():"";
				fname=x.headvalues["filename"]?x.headvalues["filename"]:x.headvalues["name"]?x.headvalues["name"]:"";
				if (fname=="") continue;
				if (!ctype.contains("text/html") && !ctype.contains("text/plain")) {
					filelist[filelist.length()]=fname;
				} else if (cdisp.contains("attachment")) {
					filelist[filelist.length()]=fname;
				}
			}
			first=true;
			for (i=0;i<filelist.length();i++) {
				f=filelist[i];
				if (first) print("<tr><th style='text-align:left'>Attachments</th><td>"); else print(" | ");
				printf("<a href=\"javascript:ns.mail.getattachment(%d, '%s');\">%s</a>", headerid, strtohtml(f), strtohtml(f));
				first=false;
			}
			if (!first) print("</td></tr>\r\n");
		}

		print("</table>\r\n");
		print("<script>\r\n");
		print("document.getElementById('contentiframe').addEventListener('load', function load() { document.getElementById('contentiframe').removeEventListener('load', load, false); ns.mail.load_view_body("+headerid+");}, false);\r\n");
		print("</script>");
	} else if (_GET['PART']=='body') {
		body=message.getbody();
		if (!message.body_found) {
			print("<b>message is not parseable!!!</B><br/>");
			print("Raw body: <pre>"+strtohtml(serialize(message.message))+"</pre>");
		} else {
			print(body);
			sql.update(sprintf("UPDATE gw_email_headers SET status = 'r' WHERE accountid = %d AND obj_uid = %d and mailheaderid = %d", row['accountid'], userid, headerid));
		}
	}
}

try {
	include("mail.lib.ns");
	print_header();
} catch (ex) {
	printf("<b>Exception: %s</b>", ex.description);
}
